  Scanning AutoAnnotate.cmt Source:AutoAnnotate.res
  Scanning BootloaderResource.cmt Source:BootloaderResource.res
  Scanning BucklescriptAnnotations.cmt Source:BucklescriptAnnotations.res
  Scanning ComponentAsProp.cmt Source:ComponentAsProp.res
  Scanning CreateErrorHandler1.cmt Source:CreateErrorHandler1.res
  Scanning CreateErrorHandler2.cmt Source:CreateErrorHandler2.res
  Scanning DeadCodeImplementation.cmt Source:DeadCodeImplementation.res
  Scanning DeadCodeInterface.cmt Source:DeadCodeInterface.res
  Scanning DeadExn.cmt Source:DeadExn.res
  Scanning DeadExn.cmti Source:DeadExn.resi
  Scanning DeadMl.cmt Source:DeadMl.ml
  Scanning DeadRT.cmt Source:DeadRT.res
  Scanning DeadRT.cmti Source:DeadRT.resi
  Scanning DeadTest.cmt Source:DeadTest.res
  Scanning DeadTestBlacklist.cmt Source:DeadTestBlacklist.res
  Scanning DeadTestWithInterface.cmt Source:DeadTestWithInterface.res
  Interface 0
  Scanning DeadTypeTest.cmt Source:DeadTypeTest.res
  Scanning DeadTypeTest.cmti Source:DeadTypeTest.resi
  Scanning DeadValueTest.cmt Source:DeadValueTest.res
  Scanning DeadValueTest.cmti Source:DeadValueTest.resi
  Scanning Docstrings.cmt Source:Docstrings.res
  Scanning DynamicallyLoadedComponent.cmt Source:DynamicallyLoadedComponent.res
  Scanning EmptyArray.cmt Source:EmptyArray.res
  Scanning ErrorHandler.cmt Source:ErrorHandler.res
  Scanning ErrorHandler.cmti Source:ErrorHandler.resi
  Scanning EverythingLiveHere.cmt Source:EverythingLiveHere.res
  Scanning FC.cmt Source:FC.res
  Scanning FirstClassModules.cmt Source:FirstClassModules.res
  Scanning FirstClassModulesInterface.cmt Source:FirstClassModulesInterface.res
  Scanning FirstClassModulesInterface.cmti Source:FirstClassModulesInterface.resi
  Scanning Hooks.cmt Source:Hooks.res
  Scanning IgnoreInterface.cmt Source:IgnoreInterface.res
  Scanning IgnoreInterface.cmti Source:IgnoreInterface.resi
  Scanning ImmutableArray.cmt Source:ImmutableArray.res
  Scanning ImmutableArray.cmti Source:ImmutableArray.resi
  Scanning ImportHookDefault.cmt Source:ImportHookDefault.res
  Scanning ImportHooks.cmt Source:ImportHooks.res
  Scanning ImportIndex.cmt Source:ImportIndex.res
  Scanning ImportJsValue.cmt Source:ImportJsValue.res
  Scanning ImportMyBanner.cmt Source:ImportMyBanner.res
  Scanning JSResource.cmt Source:JSResource.res
  Scanning LetPrivate.cmt Source:LetPrivate.res
  Scanning ModuleAliases.cmt Source:ModuleAliases.res
  Scanning ModuleAliases2.cmt Source:ModuleAliases2.res
  Scanning ModuleExceptionBug.cmt Source:ModuleExceptionBug.res
  Scanning NestedModules.cmt Source:NestedModules.res
  Scanning NestedModulesInSignature.cmt Source:NestedModulesInSignature.res
  Scanning NestedModulesInSignature.cmti Source:NestedModulesInSignature.resi
  Scanning Newsyntax.cmt Source:Newsyntax.res
  Scanning Newton.cmt Source:Newton.res
  Scanning Opaque.cmt Source:Opaque.res
  Scanning OptArg.cmt Source:OptArg.res
  Scanning OptArg.cmti Source:OptArg.resi
  Scanning Records.cmt Source:Records.res
  Scanning References.cmt Source:References.res
  Scanning RepeatedLabel.cmt Source:RepeatedLabel.res
  Scanning RequireCond.cmt Source:RequireCond.res
  Scanning Shadow.cmt Source:Shadow.res
  Scanning TestDeadExn.cmt Source:TestDeadExn.res
  Scanning TestEmitInnerModules.cmt Source:TestEmitInnerModules.res
  Scanning TestFirstClassModules.cmt Source:TestFirstClassModules.res
  Scanning TestImmutableArray.cmt Source:TestImmutableArray.res
  Scanning TestImport.cmt Source:TestImport.res
  Scanning TestModuleAliases.cmt Source:TestModuleAliases.res
  Scanning TestOptArg.cmt Source:TestOptArg.res
  Scanning TestPromise.cmt Source:TestPromise.res
  Scanning ToSuppress.cmt Source:ToSuppress.res
  Scanning TransitiveType1.cmt Source:TransitiveType1.res
  Scanning TransitiveType2.cmt Source:TransitiveType2.res
  Scanning TransitiveType3.cmt Source:TransitiveType3.res
  Scanning Tuples.cmt Source:Tuples.res
  Scanning TypeParams1.cmt Source:TypeParams1.res
  Scanning TypeParams2.cmt Source:TypeParams2.res
  Scanning TypeParams3.cmt Source:TypeParams3.res
  Scanning Types.cmt Source:Types.res
  Scanning Unboxed.cmt Source:Unboxed.res
  Scanning Uncurried.cmt Source:Uncurried.res
  Scanning Unison.cmt Source:Unison.res
  Scanning UseImportJsValue.cmt Source:UseImportJsValue.res
  Scanning Variants.cmt Source:Variants.res
  Scanning VariantsWithPayload.cmt Source:VariantsWithPayload.res
  Scanning Arr.cmt Source:Arr.res
  Scanning BeltTest.cmt Source:BeltTest.res
  Scanning BsJson.cmt Source:BsJson.res
  Scanning Exn.cmt Source:Exn.res
  Scanning ExnA.cmt Source:ExnA.res
  Scanning ExnB.cmt Source:ExnB.res
  Scanning ExportWithRename.cmt Source:ExportWithRename.res
  Scanning InnerModules.cmt Source:InnerModules.res
  Scanning TestInnerModules.cmt Source:TestInnerModules.res
  Scanning TestYojson.cmt Source:TestYojson.res
  Scanning Yojson.cmt Source:Yojson.res
  Scanning Chess.cmt Source:Chess.res
  Scanning Matrix.cmt Source:Matrix.res
  Scanning TestNoalloc.cmt Source:TestNoalloc.res
  Solving Set-Closure
  Collecting Dependencies
  Solving Dependencies
  Done.

  Warning Dead Expression
  File "CreateErrorHandler1.res", line 3, characters 26-32
  This expression is evaluated as useless value and has no side effect
  <-- line 3
    let notification = s => (s, s)
                            ------

  Warning Dead Expression
  File "DeadExn.res", line 8, characters 16-25
  This expression is evaluated as useless value and has no side effect
  <-- line 8
  let eToplevel = Etoplevel
                  ---------

  Warning Dead Expression
  File "DeadMl.ml", line 4, characters 7-40
  This expression is evaluated as useless value and has no side effect
  <-- line 4
        (fun x -> fun y ->
         ----------------- (continued...)

  Warning Dead Expression
  File "DeadMl.ml", line 15, characters 24-25
  This expression is evaluated as useless value and has no side effect
  <-- line 15
  let thisHasSemicolons = 3;;
                          -  

  Warning Dead Expression
  File "DeadMl.ml", line 29, characters 18-31
  This expression is evaluated as useless value and has no side effect
  <-- line 29
      let version = "7.2.0-dev.4"
                    -------------

  Warning Dead Expression
  File "DeadMl.ml", line 30, characters 17-70
  This expression is evaluated as useless value and has no side effect
  <-- line 30
      let header = "// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE"
                   -----------------------------------------------------

  Warning Dead Expression
  File "DeadMl.ml", line 31, characters 23-36
  This expression is evaluated as useless value and has no side effect
  <-- line 31
      let package_name = "bs-platform"
                         -------------

  Warning Dead Expression
  File "DeadMl.ml", line 48, characters 2-204
  This expression is evaluated as useless value and has no side effect
  <-- line 48
    match xs with 
    -------------- (continued...)

  Warning Dead Expression
  File "DeadMl.ml", line 59, characters 14-15
  This expression is evaluated as useless value and has no side effect
  <-- line 59
    let dead1 = 1
                -

  Warning Dead Expression
  File "DeadMl.ml", line 62, characters 21-22
  This expression is evaluated as useless value and has no side effect
  <-- line 62
      let deadInner1 = 0
                       -

  Warning Dead Expression
  File "DeadMl.ml", line 66, characters 21-22
  This expression is evaluated as useless value and has no side effect
  <-- line 66
      let liveInner2 = 0
                       -

  Warning Dead Expression
  File "DeadMl.ml", line 69, characters 14-15
  This expression is evaluated as useless value and has no side effect
  <-- line 69
    let dead2 = 2
                -

  Warning Dead Expression
  File "DeadMl.ml", line 74, characters 21-22
  This expression is evaluated as useless value and has no side effect
  <-- line 74
      let liveInner3 = 0
                       -

  Warning Dead Expression
  File "DeadMl.ml", line 77, characters 14-15
  This expression is evaluated as useless value and has no side effect
  <-- line 77
    let live3 = 3
                -

  Warning Dead Expression
  File "DeadMl.ml", line 80, characters 12-13
  This expression is evaluated as useless value and has no side effect
  <-- line 80
  let dead4 = 4
              -

  Warning Dead Expression
  File "DeadMl.ml", line 82, characters 12-13
  This expression is evaluated as useless value and has no side effect
  <-- line 82
  let live5 = 5
              -

  Warning Dead Expression
  File "DeadMl.ml", line 85, characters 12-13
  This expression is evaluated as useless value and has no side effect
  <-- line 85
  let dead5 = 5
              -

  Warning Dead Expression
  File "DeadMl.ml", line 87, characters 12-13
  This expression is evaluated as useless value and has no side effect
  <-- line 87
  let live6 = 6
              -

  Warning Dead Expression
  File "DeadMl.ml", line 90, characters 12-13
  This expression is evaluated as useless value and has no side effect
  <-- line 90
  let dead7 = 7
              -

  Warning Dead Expression
  File "DeadMl.ml", line 106, characters 14-15
  This expression is evaluated as useless value and has no side effect
  <-- line 106
    let dead8 = 8
                -

  Warning Dead Expression
  File "DeadMl.ml", line 107, characters 14-15
  This expression is evaluated as useless value and has no side effect
  <-- line 107
    let live9 = 9
                -

  Warning Dead Expression
  File "DeadMl.ml", line 108, characters 15-17
  This expression is evaluated as useless value and has no side effect
  <-- line 108
    let dead10 = 10
                 --

  Warning Dead Expression
  File "DeadMl.ml", line 109, characters 15-17
  This expression is evaluated as useless value and has no side effect
  <-- line 109
    let live11 = 11
                 --

  Warning Dead Expression
  File "DeadRT.res", line 5, characters 31-116
  This expression is evaluated as useless value and has no side effect
  <-- line 5
  let rec emitModuleAccessPath = moduleAccessPath =>
                                 ------------------- (continued...)

  Warning Dead Expression
  File "DeadTest.res", line 2, characters 15-17
  This expression is evaluated as useless value and has no side effect
  <-- line 2
  let fortytwo = 42
                 --

  Warning Dead Expression
  File "DeadTest.res", line 5, characters 26-28
  This expression is evaluated as useless value and has no side effect
  <-- line 5
  let fortyTwoButExported = 42
                            --

  Warning Dead Expression
  File "DeadTest.res", line 7, characters 21-23
  This expression is evaluated as useless value and has no side effect
  <-- line 7
  let thisIsUsedOnce = 34
                       --

  Warning Dead Expression
  File "DeadTest.res", line 10, characters 22-24
  This expression is evaluated as useless value and has no side effect
  <-- line 10
  let thisIsUsedTwice = 34
                        --

  Warning Dead Expression
  File "DeadTest.res", line 31, characters 32-34
  This expression is evaluated as useless value and has no side effect
  <-- line 31
    let thisSignatureItemIsDead = 34
                                  --

  Warning Dead Expression
  File "DeadTest.res", line 39, characters 10-11
  This expression is evaluated as useless value and has no side effect
  <-- line 39
    let a = A
            -

  Warning Dead Expression
  File "DeadTest.res", line 42, characters 9-51
  This expression is evaluated as useless value and has no side effect
  <-- line 42
  let _ = (x => x)(VariantUsedOnlyInImplementation.a)
           ------------------------------------------

  Warning Dead Expression
  File "DeadTest.res", line 52, characters 8-18
  This expression is evaluated as useless value and has no side effect
  <-- line 52
  let _ = r => r.xxx
          ----------

  Warning Dead Expression
  File "DeadTest.res", line 53, characters 8-22
  This expression is evaluated as useless value and has no side effect
  <-- line 53
  let _ = ({yyy}) => yyy
          --------------

  Warning Dead Expression
  File "DeadTest.res", line 65, characters 34-35
  This expression is evaluated as useless value and has no side effect
  <-- line 65
    let valueOnlyInImplementation = 7
                                    -

  Warning Dead Expression
  File "DeadTest.res", line 70, characters 2-4
  This expression is evaluated as useless value and has no side effect
  <-- line 70
    44
    --

  Warning Dead Expression
  File "DeadTest.res", line 77, characters 20-60
  This expression is evaluated as useless value and has no side effect
  <-- line 77
  let rec split_map = l => {
                      ------ (continued...)

  Warning Dead Expression
  File "DeadTest.res", line 85, characters 26-77
  This expression is evaluated as useless value and has no side effect
  <-- line 85
  let rec recWithCallback = () => {
                            ------- (continued...)

  Warning Dead Expression
  File "DeadTest.res", line 90, characters 14-53
  This expression is evaluated as useless value and has no side effect
  <-- line 90
  let rec foo = () => {
                ------- (continued...)

  Warning Dead Expression
  File "DeadTest.res", line 94, characters 10-21
  This expression is evaluated as useless value and has no side effect
  <-- line 94
  and bar = () => foo()
            -----------

  Warning Dead Expression
  File "DeadTest.res", line 96, characters 23-71
  This expression is evaluated as useless value and has no side effect
  <-- line 96
  let withDefaultValue = (~paramWithDefault=3, y) => paramWithDefault + y
                         ------------------------------------------------

  Warning Dead Expression
  File "DeadTest.res", line 116, characters 18-54
  This expression is evaluated as useless value and has no side effect
  <-- line 116
    let makeProps = DynamicallyLoadedComponent.makeProps
                    ------------------------------------

  Warning Dead Expression
  File "DeadTest.res", line 117, characters 13-170
  This expression is evaluated as useless value and has no side effect
  <-- line 117
    let make = props =>
               -------- (continued...)

  Warning Dead Expression
  File "DeadTest.res", line 129, characters 11-62
  This expression is evaluated as useless value and has no side effect
  <-- line 129
  let cmp2 = () => <LazyDynamicallyLoadedComponent2 s="hello" />
             ---------------------------------------------------

  Warning Dead Expression
  File "DeadTest.res", line 150, characters 14-21
  This expression is evaluated as useless value and has no side effect
  <-- line 150
  let deadRef = ref(12)
                -------

  Warning Dead Expression
  File "DeadTest.res", line 152, characters 17-37
  This expression is evaluated as useless value and has no side effect
  <-- line 152
  let makeSwitch = ComponentSwitch.make
                   --------------------

  Warning Dead Expression
  File "DeadTest.res", line 164, characters 22-23
  This expression is evaluated as useless value and has no side effect
  <-- line 164
    let globallyLive1 = 1
                        -

  Warning Dead Expression
  File "DeadTest.res", line 165, characters 22-23
  This expression is evaluated as useless value and has no side effect
  <-- line 165
    let globallyLive2 = 2
                        -

  Warning Dead Expression
  File "DeadTest.res", line 166, characters 22-23
  This expression is evaluated as useless value and has no side effect
  <-- line 166
    let globallyLive3 = 3
                        -

  Warning Dead Expression
  File "DeadValueTest.res", line 2, characters 16-17
  This expression is evaluated as useless value and has no side effect
  <-- line 2
  let valueDead = 2
                  -

  Warning Dead Expression
  File "DeadValueTest.res", line 4, characters 32-33
  This expression is evaluated as useless value and has no side effect
  <-- line 4
  let valueOnlyInImplementation = 3
                                  -

  Warning Dead Expression
  File "DeadValueTest.res", line 6, characters 18-260
  This expression is evaluated as useless value and has no side effect
  <-- line 6
  let rec subList = (b, e, l) =>
                    ------------ (continued...)

  Warning Dead Expression
  File "ErrorHandler.res", line 12, characters 8-10
  This expression is evaluated as useless value and has no side effect
  <-- line 12
  let x = 42
          --

  Warning Dead Expression
  File "Exn.res", line 1, characters 13-35
  This expression is evaluated as useless value and has no side effect
  <-- line 1
  let raises = () => raise(Not_found)
               ----------------------

  Warning Dead Expression
  File "Exn.res", line 17, characters 26-48
  This expression is evaluated as useless value and has no side effect
  <-- line 17
  let raisesWithAnnotaion = () => raise(Not_found)
                            ----------------------

  Warning Dead Expression
  File "Exn.res", line 19, characters 31-52
  This expression is evaluated as useless value and has no side effect
  <-- line 19
  let callsRaiseWithAnnotation = raisesWithAnnotaion()
                                 ---------------------

  Warning Dead Expression
  File "Exn.res", line 22, characters 45-66
  This expression is evaluated as useless value and has no side effect
  <-- line 22
  let callsRaiseWithAnnotationAndIsAnnotated = raisesWithAnnotaion()
                                               ---------------------

  Warning Dead Expression
  File "Exn.res", line 26, characters 22-60
  This expression is evaluated as useless value and has no side effect
  <-- line 26
  let incompleteMatch = l =>
                        ---- (continued...)

  Warning Dead Expression
  File "Exn.res", line 34, characters 16-81
  This expression is evaluated as useless value and has no side effect
  <-- line 34
  let twoRaises = (x, y) => {
                  ----------- (continued...)

  Warning Dead Expression
  File "Exn.res", line 43, characters 17-76
  This expression is evaluated as useless value and has no side effect
  <-- line 43
  let sequencing = () => {
                   ------- (continued...)

  Warning Dead Expression
  File "Exn.res", line 50, characters 17-61
  This expression is evaluated as useless value and has no side effect
  <-- line 50
  let wrongCatch = () =>
                   ----- (continued...)

  Warning Dead Expression
  File "Exn.res", line 56, characters 18-122
  This expression is evaluated as useless value and has no side effect
  <-- line 56
  let wrongCatch2 = b =>
                    ---- (continued...)

  Warning Dead Expression
  File "Exn.res", line 64, characters 22-87
  This expression is evaluated as useless value and has no side effect
  <-- line 64
  let raise2Annotate3 = (x, y) => {
                        ----------- (continued...)

  Warning Dead Expression
  File "Exn.res", line 75, characters 27-196
  This expression is evaluated as useless value and has no side effect
  <-- line 75
  let parse_json_from_file = s => {
                             ------ (continued...)

  Warning Dead Expression
  File "Exn.res", line 87, characters 14-83
  This expression is evaluated as useless value and has no side effect
  <-- line 87
  let reRaise = () =>
                ----- (continued...)

  Warning Dead Expression
  File "Exn.res", line 93, characters 25-72
  This expression is evaluated as useless value and has no side effect
  <-- line 93
  let switchWithCatchAll = switch raise(A) {
                           ----------------- (continued...)

  Warning Dead Expression
  File "Exn.res", line 98, characters 25-70
  This expression is evaluated as useless value and has no side effect
  <-- line 98
  let raiseInInternalLet = b => {
                           ------ (continued...)

  Warning Dead Expression
  File "Exn.res", line 103, characters 19-50
  This expression is evaluated as useless value and has no side effect
  <-- line 103
  let indirectCall = () => () |> raisesWithAnnotaion
                     -------------------------------

  Warning Dead Expression
  File "Exn.res", line 106, characters 12-21
  This expression is evaluated as useless value and has no side effect
  <-- line 106
  let array = a => a[2]
              ---------

  Warning Dead Expression
  File "Exn.res", line 108, characters 9-15
  This expression is evaluated as useless value and has no side effect
  <-- line 108
  let id = x => x
           ------

  Warning Dead Expression
  File "Exn.res", line 110, characters 14-83
  This expression is evaluated as useless value and has no side effect
  <-- line 110
  let tryChar = v => {
                ------ (continued...)

  Warning Dead Expression
  File "Exn.res", line 122, characters 22-56
  This expression is evaluated as useless value and has no side effect
  <-- line 122
  let specializedHash = tbl => StringHash.find(tbl, "abc")
                        ----------------------------------

  Warning Dead Expression
  File "Exn.res", line 125, characters 18-49
  This expression is evaluated as useless value and has no side effect
  <-- line 125
  let genericHash = tbl => Hashtbl.find(tbl, "abc")
                    -------------------------------

  Warning Dead Expression
  File "Exn.res", line 128, characters 16-45
  This expression is evaluated as useless value and has no side effect
  <-- line 128
  let raiseAtAt = () => \"@@"(raise, Not_found)
                  -----------------------------

  Warning Dead Expression
  File "Exn.res", line 131, characters 16-34
  This expression is evaluated as useless value and has no side effect
  <-- line 131
  let raisePipe = Not_found |> raise
                  ------------------

  Warning Dead Expression
  File "Exn.res", line 134, characters 17-33
  This expression is evaluated as useless value and has no side effect
  <-- line 134
  let raiseArrow = Not_found->raise
                   ----------------

  Warning Dead Expression
  File "Exn.res", line 137, characters 10-39
  This expression is evaluated as useless value and has no side effect
  <-- line 137
  let bar = () => Js.Json.parseExn("!!!")
            -----------------------------

  Warning Dead Expression
  File "Exn.res", line 139, characters 10-93
  This expression is evaluated as useless value and has no side effect
  <-- line 139
  let foo = () =>
            ----- (continued...)

  Warning Dead Expression
  File "Exn.res", line 151, characters 19-151
  This expression is evaluated as useless value and has no side effect
  <-- line 151
  let severalCases = cases =>
                     -------- (continued...)

  Warning Dead Expression
  File "Exn.res", line 160, characters 33-50
  This expression is evaluated as useless value and has no side effect
  <-- line 160
  let genericRaiseIsNotSupported = exn => raise(exn)
                                   -----------------

  Warning Dead Expression
  File "Exn.res", line 168, characters 17-226
  This expression is evaluated as useless value and has no side effect
  <-- line 168
  let redundant4 = () => {
                   ------- (continued...)

  Warning Dead Expression
  File "Exn.res", line 179, characters 26-34
  This expression is evaluated as useless value and has no side effect
  <-- line 179
  let redundantAnnotation = () => ()
                            --------

  Warning Dead Expression
  File "Exn.res", line 181, characters 9-17
  This expression is evaluated as useless value and has no side effect
  <-- line 181
  let _x = raise(A)
           --------

  Warning Dead Expression
  File "Exn.res", line 183, characters 8-16
  This expression is evaluated as useless value and has no side effect
  <-- line 183
  let _ = raise(A)
          --------

  Warning Dead Expression
  File "Exn.res", line 187, characters 0-16
  This expression is evaluated as useless value and has no side effect
  <-- line 187
  raise(Not_found)
  ----------------

  Warning Dead Expression
  File "Exn.res", line 193, characters 17-63
  This expression is evaluated as useless value and has no side effect
  <-- line 193
  let onFunction = () => (@doesNotRaise Belt.Array.getExn)([], 0)
                   ----------------------------------------------

  Warning Dead Expression
  File "Exn.res", line 195, characters 15-59
  This expression is evaluated as useless value and has no side effect
  <-- line 195
  let onResult = () => @doesNotRaise Belt.Array.getExn([], 0)
                 --------------------------------------------

  Warning Dead Expression
  File "Exn.res", line 197, characters 21-67
  This expression is evaluated as useless value and has no side effect
  <-- line 197
  let onFunctionPipe = () => []->(@doesNotRaise Belt.Array.getExn)(0)
                       ----------------------------------------------

  Warning Dead Expression
  File "Exn.res", line 199, characters 24-68
  This expression is evaluated as useless value and has no side effect
  <-- line 199
  let onResultPipeWrong = () => @doesNotRaise []->Belt.Array.getExn(0)
                          --------------------------------------------

  Warning Dead Expression
  File "ExnB.res", line 2, characters 10-32
  This expression is evaluated as useless value and has no side effect
  <-- line 2
  let foo = () => raise(Not_found)
            ----------------------

  Warning Dead Expression
  File "Hooks.res", line 4, characters 11-703
  This expression is evaluated as useless value and has no side effect
  <-- line 4
  let make = (~vehicle) => {
             --------------- (continued...)

  Warning Dead Expression
  File "Hooks.res", line 25, characters 14-18
  This expression is evaluated as useless value and has no side effect
  <-- line 25
  let default = make
                ----

  Warning Dead Expression
  File "Hooks.res", line 28, characters 23-141
  This expression is evaluated as useless value and has no side effect
  <-- line 28
  let anotherComponent = (~vehicle, ~callback: unit => unit) => {
                         ---------------------------------------- (continued...)

  Warning Dead Expression
  File "Hooks.res", line 35, characters 13-87
  This expression is evaluated as useless value and has no side effect
  <-- line 35
    let make = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
               --------------------------------------------------------------------------

  Warning Dead Expression
  File "Hooks.res", line 38, characters 25-99
  This expression is evaluated as useless value and has no side effect
  <-- line 38
    let anotherComponent = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
                           --------------------------------------------------------------------------

  Warning Dead Expression
  File "Hooks.res", line 42, characters 15-89
  This expression is evaluated as useless value and has no side effect
  <-- line 42
      let make = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
                 --------------------------------------------------------------------------

  Warning Dead Expression
  File "Hooks.res", line 45, characters 27-107
  This expression is evaluated as useless value and has no side effect
  <-- line 45
      let anotherComponent = (~vehicle) =>
                             ------------- (continued...)

  Warning Dead Expression
  File "Hooks.res", line 52, characters 13-42
  This expression is evaluated as useless value and has no side effect
  <-- line 52
    let make = () => <div> React.null </div>
               -----------------------------

  Warning Dead Expression
  File "Hooks.res", line 58, characters 30-96
  This expression is evaluated as useless value and has no side effect
  <-- line 58
  let functionWithRenamedArgs = (~_to, ~_Type, ~cb: cb) => {
                                ---------------------------- (continued...)

  Warning Dead Expression
  File "Hooks.res", line 64, characters 31-111
  This expression is evaluated as useless value and has no side effect
  <-- line 64
  let componentWithRenamedArgs = (~_to, ~_Type, ~cb: cb) => {
                                 ---------------------------- (continued...)

  Warning Dead Expression
  File "Hooks.res", line 100, characters 27-65
  This expression is evaluated as useless value and has no side effect
  <-- line 100
  let polymorphicComponent = (~p as (x, _)) => React.string(x.name)
                             --------------------------------------

  Warning Dead Expression
  File "Hooks.res", line 103, characters 36-65
  This expression is evaluated as useless value and has no side effect
  <-- line 103
  let functionReturningReactElement = (~name) => React.string(name)
                                      -----------------------------

  Warning Dead Expression
  File "Hooks.res", line 107, characters 13-170
  This expression is evaluated as useless value and has no side effect
  <-- line 107
    let make = (~renderVehicle: {"vehicle": vehicle, "number": int} => React.element) => {
               --------------------------------------------------------------------------- (continued...)

  Warning Dead Expression
  File "Hooks.res", line 114, characters 29-138
  This expression is evaluated as useless value and has no side effect
  <-- line 114
  let aComponentWithChildren = (~vehicle, ~children) =>
                               ------------------------ (continued...)

  Warning Dead Expression
  File "ImmutableArray.res", line 16, characters 32-40
  This expression is evaluated as useless value and has no side effect
  <-- line 16
    let toArray = a => Array.copy(a->fromT)
                                  -------- 

  Warning Dead Expression
  File "ImmutableArray.res", line 20, characters 33-41
  This expression is evaluated as useless value and has no side effect
  <-- line 20
    let length = a => Array.length(a->fromT)
                                   -------- 

  Warning Dead Expression
  File "ImmutableArray.res", line 22, characters 29-37
  This expression is evaluated as useless value and has no side effect
  <-- line 22
    let size = a => Array.size(a->fromT)
                               -------- 

  Warning Dead Expression
  File "ImmutableArray.res", line 24, characters 23-35
  This expression is evaluated as useless value and has no side effect
  <-- line 24
    let get = (a, x) => (a->fromT)[x]
                         ------------

  Warning Dead Expression
  File "ImmutableArray.res", line 26, characters 25-50
  This expression is evaluated as useless value and has no side effect
  <-- line 26
    let getExn = (a, x) => Array.getExn(a->fromT, x)
                           -------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 28, characters 28-56
  This expression is evaluated as useless value and has no side effect
  <-- line 28
    let getUnsafe = (a, x) => Array.getUnsafe(a->fromT, x)
                              ----------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 30, characters 31-62
  This expression is evaluated as useless value and has no side effect
  <-- line 30
    let getUndefined = (a, x) => Array.getUndefined(a->fromT, x)
                                 -------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 32, characters 21-44
  This expression is evaluated as useless value and has no side effect
  <-- line 32
    let shuffle = x => Array.shuffle(x->fromT)->toT
                       -----------------------     

  Warning Dead Expression
  File "ImmutableArray.res", line 34, characters 21-44
  This expression is evaluated as useless value and has no side effect
  <-- line 34
    let reverse = x => Array.reverse(x->fromT)->toT
                       -----------------------     

  Warning Dead Expression
  File "ImmutableArray.res", line 36, characters 31-57
  This expression is evaluated as useless value and has no side effect
  <-- line 36
    let makeUninitialized = x => Array.makeUninitialized(x)->toT
                                 --------------------------     

  Warning Dead Expression
  File "ImmutableArray.res", line 38, characters 37-69
  This expression is evaluated as useless value and has no side effect
  <-- line 38
    let makeUninitializedUnsafe = x => Array.makeUninitializedUnsafe(x)->toT
                                       --------------------------------     

  Warning Dead Expression
  File "ImmutableArray.res", line 40, characters 23-44
  This expression is evaluated as useless value and has no side effect
  <-- line 40
    let make = (x, y) => Array.make(x, y)->toT
                         ---------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 42, characters 24-46
  This expression is evaluated as useless value and has no side effect
  <-- line 42
    let range = (x, y) => Array.range(x, y)->toT
                          ----------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 44, characters 33-64
  This expression is evaluated as useless value and has no side effect
  <-- line 44
    let rangeBy = (x, y, ~step) => Array.rangeBy(x, y, ~step)->toT
                                   -------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 46, characters 26-50
  This expression is evaluated as useless value and has no side effect
  <-- line 46
    let makeByU = (c, f) => Array.makeByU(c, f)->toT
                            ------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 47, characters 25-48
  This expression is evaluated as useless value and has no side effect
  <-- line 47
    let makeBy = (c, f) => Array.makeBy(c, f)->toT
                           -----------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 49, characters 36-70
  This expression is evaluated as useless value and has no side effect
  <-- line 49
    let makeByAndShuffleU = (c, f) => Array.makeByAndShuffleU(c, f)->toT
                                      ----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 50, characters 35-68
  This expression is evaluated as useless value and has no side effect
  <-- line 50
    let makeByAndShuffle = (c, f) => Array.makeByAndShuffle(c, f)->toT
                                     ---------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 52, characters 24-61
  This expression is evaluated as useless value and has no side effect
  <-- line 52
    let zip = (a1, a2) => Array.zip(fromT(a1), fromT(a2))->toTp
                          -------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 54, characters 30-72
  This expression is evaluated as useless value and has no side effect
  <-- line 54
    let zipByU = (a1, a2, f) => Array.zipByU(fromT(a1), fromT(a2), f)->toT
                                ------------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 55, characters 29-70
  This expression is evaluated as useless value and has no side effect
  <-- line 55
    let zipBy = (a1, a2, f) => Array.zipBy(fromT(a1), fromT(a2), f)->toT
                               -----------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 57, characters 19-41
  This expression is evaluated as useless value and has no side effect
  <-- line 57
    let unzip = a => Array.unzip(a->fromTp)->toT2
                     ----------------------      

  Warning Dead Expression
  File "ImmutableArray.res", line 59, characters 27-66
  This expression is evaluated as useless value and has no side effect
  <-- line 59
    let concat = (a1, a2) => Array.concat(a1->fromT, a2->fromT)->toT
                             ---------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 61, characters 35-62
  This expression is evaluated as useless value and has no side effect
  <-- line 61
    let concatMany = (a: t<t<_>>) => Array.concatMany(a->fromTT)->toT
                                     ---------------------------     

  Warning Dead Expression
  File "ImmutableArray.res", line 63, characters 36-77
  This expression is evaluated as useless value and has no side effect
  <-- line 63
    let slice = (a, ~offset, ~len) => Array.slice(a->fromT, ~offset, ~len)->toT
                                      -----------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 65, characters 29-63
  This expression is evaluated as useless value and has no side effect
  <-- line 65
    let sliceToEnd = (a, b) => Array.sliceToEnd(a->fromT, b)->toT
                               ----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 67, characters 18-38
  This expression is evaluated as useless value and has no side effect
  <-- line 67
    let copy = a => Array.copy(a->fromT)->toT
                    --------------------     

  Warning Dead Expression
  File "ImmutableArray.res", line 72, characters 23-51
  This expression is evaluated as useless value and has no side effect
  <-- line 72
    let mapU = (a, f) => Array.mapU(a->fromT, f)->toT
                         ----------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 73, characters 22-49
  This expression is evaluated as useless value and has no side effect
  <-- line 73
    let map = (a, f) => Array.map(a->fromT, f)->toT
                        ---------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 75, characters 33-71
  This expression is evaluated as useless value and has no side effect
  <-- line 75
    let keepWithIndexU = (a, f) => Array.keepWithIndexU(a->fromT, f)->toT
                                   --------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 76, characters 32-69
  This expression is evaluated as useless value and has no side effect
  <-- line 76
    let keepWithIndex = (a, f) => Array.keepWithIndex(a->fromT, f)->toT
                                  -------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 78, characters 27-59
  This expression is evaluated as useless value and has no side effect
  <-- line 78
    let keepMapU = (a, f) => Array.keepMapU(a->fromT, f)->toT
                             --------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 79, characters 26-57
  This expression is evaluated as useless value and has no side effect
  <-- line 79
    let keepMap = (a, f) => Array.keepMap(a->fromT, f)->toT
                            -------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 84, characters 32-69
  This expression is evaluated as useless value and has no side effect
  <-- line 84
    let mapWithIndexU = (a, f) => Array.mapWithIndexU(a->fromT, f)->toT
                                  -------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 85, characters 31-67
  This expression is evaluated as useless value and has no side effect
  <-- line 85
    let mapWithIndex = (a, f) => Array.mapWithIndex(a->fromT, f)->toT
                                 ------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 87, characters 29-64
  This expression is evaluated as useless value and has no side effect
  <-- line 87
    let partitionU = (a, f) => Array.partitionU(a->fromT, f)->toT2
                               -----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 88, characters 28-62
  This expression is evaluated as useless value and has no side effect
  <-- line 88
    let partition = (a, f) => Array.partition(a->fromT, f)->toT2
                              ----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 90, characters 29-58
  This expression is evaluated as useless value and has no side effect
  <-- line 90
    let reduceU = (a, b, f) => Array.reduceU(a->fromT, b, f)
                               -----------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 91, characters 28-56
  This expression is evaluated as useless value and has no side effect
  <-- line 91
    let reduce = (a, b, f) => Array.reduce(a->fromT, b, f)
                              ----------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 93, characters 36-72
  This expression is evaluated as useless value and has no side effect
  <-- line 93
    let reduceReverseU = (a, b, f) => Array.reduceReverseU(a->fromT, b, f)
                                      ------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 94, characters 35-70
  This expression is evaluated as useless value and has no side effect
  <-- line 94
    let reduceReverse = (a, b, f) => Array.reduceReverse(a->fromT, b, f)
                                     -----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 96, characters 42-91
  This expression is evaluated as useless value and has no side effect
  <-- line 96
    let reduceReverse2U = (a1, a2, c, f) => Array.reduceReverse2U(fromT(a1), fromT(a2), c, f)
                                            -------------------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 97, characters 41-89
  This expression is evaluated as useless value and has no side effect
  <-- line 97
    let reduceReverse2 = (a1, a2, c, f) => Array.reduceReverse2(fromT(a1), fromT(a2), c, f)
                                           ------------------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 99, characters 24-48
  This expression is evaluated as useless value and has no side effect
  <-- line 99
    let someU = (a, f) => Array.someU(a->fromT, f)
                          ------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 100, characters 23-46
  This expression is evaluated as useless value and has no side effect
  <-- line 100
    let some = (a, f) => Array.some(a->fromT, f)
                         -----------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 102, characters 25-50
  This expression is evaluated as useless value and has no side effect
  <-- line 102
    let everyU = (a, f) => Array.everyU(a->fromT, f)
                           -------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 103, characters 24-48
  This expression is evaluated as useless value and has no side effect
  <-- line 103
    let every = (a, f) => Array.every(a->fromT, f)
                          ------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 105, characters 31-69
  This expression is evaluated as useless value and has no side effect
  <-- line 105
    let every2U = (a1, a2, f) => Array.every2U(fromT(a1), fromT(a2), f)
                                 --------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 106, characters 30-67
  This expression is evaluated as useless value and has no side effect
  <-- line 106
    let every2 = (a1, a2, f) => Array.every2(fromT(a1), fromT(a2), f)
                                -------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 108, characters 30-67
  This expression is evaluated as useless value and has no side effect
  <-- line 108
    let some2U = (a1, a2, f) => Array.some2U(fromT(a1), fromT(a2), f)
                                -------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 109, characters 29-65
  This expression is evaluated as useless value and has no side effect
  <-- line 109
    let some2 = (a1, a2, f) => Array.some2(fromT(a1), fromT(a2), f)
                               ------------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 111, characters 28-63
  This expression is evaluated as useless value and has no side effect
  <-- line 111
    let cmpU = (a1, a2, f) => Array.cmpU(fromT(a1), fromT(a2), f)
                              -----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 112, characters 27-61
  This expression is evaluated as useless value and has no side effect
  <-- line 112
    let cmp = (a1, a2, f) => Array.cmp(fromT(a1), fromT(a2), f)
                             ----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 114, characters 27-61
  This expression is evaluated as useless value and has no side effect
  <-- line 114
    let eqU = (a1, a2, f) => Array.eqU(fromT(a1), fromT(a2), f)
                             ----------------------------------

  Warning Dead Expression
  File "ImmutableArray.res", line 115, characters 26-59
  This expression is evaluated as useless value and has no side effect
  <-- line 115
    let eq = (a1, a2, f) => Array.eq(fromT(a1), fromT(a2), f)
                            ---------------------------------

  Warning Dead Expression
  File "ImportJsValue.res", line 40, characters 15-73
  This expression is evaluated as useless value and has no side effect
  <-- line 40
    let getAbs = (x: t) => {
                 ----------- (continued...)

  Warning Dead Expression
  File "ImportJsValue.res", line 47, characters 17-69
  This expression is evaluated as useless value and has no side effect
  <-- line 47
  let useGetProp = (x: AbsoluteValue.t) => x->AbsoluteValue.getProp + 1
                   ----------------------------------------------------

  Warning Dead Expression
  File "ImportJsValue.res", line 50, characters 16-67
  This expression is evaluated as useless value and has no side effect
  <-- line 50
  let useGetAbs = (x: AbsoluteValue.t) => x->AbsoluteValue.getAbs + 1
                  ---------------------------------------------------

  Warning Dead Expression
  File "InnerModules.res", line 2, characters 18-30
  This expression is evaluated as useless value and has no side effect
  <-- line 2
  let wrapExitTop = x => exit(x)
                    ------------

  Warning Dead Expression
  File "InnerModules.res", line 6, characters 19-31
  This expression is evaluated as useless value and has no side effect
  <-- line 6
    let wrapExitM1 = x => exit(x)
                     ------------

  Warning Dead Expression
  File "InnerModules.res", line 9, characters 20-38
  This expression is evaluated as useless value and has no side effect
  <-- line 9
    let callLocally = x => wrapExitM1(x)
                      ------------------

  Warning Dead Expression
  File "InnerModules.res", line 12, characters 16-35
  This expression is evaluated as useless value and has no side effect
  <-- line 12
    let callTop = x => wrapExitTop(x)
                  -------------------

  Warning Dead Expression
  File "InnerModules.res", line 16, characters 21-33
  This expression is evaluated as useless value and has no side effect
  <-- line 16
      let wrapExitM2 = x => exit(x)
                       ------------

  Warning Dead Expression
  File "InnerModules.res", line 19, characters 17-35
  This expression is evaluated as useless value and has no side effect
  <-- line 19
      let callM1 = x => wrapExitM1(x)
                   ------------------

  Warning Dead Expression
  File "InnerModules.res", line 22, characters 18-37
  This expression is evaluated as useless value and has no side effect
  <-- line 22
      let callTop = x => wrapExitTop(x)
                    -------------------

  Warning Dead Expression
  File "InnerModules.res", line 27, characters 13-34
  This expression is evaluated as useless value and has no side effect
  <-- line 27
  let callM1 = x => M1.wrapExitM1(x)
               ---------------------

  Warning Dead Expression
  File "ModuleAliases2.res", line 21, characters 8-10
  This expression is evaluated as useless value and has no side effect
  <-- line 21
  let q = 42
          --

  Warning Dead Expression
  File "ModuleExceptionBug.res", line 2, characters 21-35
  This expression is evaluated as useless value and has no side effect
  <-- line 2
    let customDouble = foo => foo * 2
                       --------------

  Warning Dead Expression
  File "OptArg.res", line 20, characters 45-47
  This expression is evaluated as useless value and has no side effect
  <-- line 20
  let wrapOneArg = (~a=?, n) => oneArg(~a?, ~z=33, n)
                                               --    

  Warning Dead Expression
  File "TestOptArg.res", line 1, characters 21-22
  This expression is evaluated as useless value and has no side effect
  <-- line 1
  Js.log(OptArg.bar(~z=3, ~y=3, 4))
                       -           

  Warning Dead Expression
  File "Types.res", line 5, characters 18-31
  This expression is evaluated as useless value and has no side effect
  <-- line 5
  let someIntList = list{1, 2, 3}
                    -------------

  Warning Dead Expression
  File "Types.res", line 8, characters 10-18
  This expression is evaluated as useless value and has no side effect
  <-- line 8
  let map = List.map
            --------

  Warning Dead Expression
  File "Types.res", line 23, characters 15-172
  This expression is evaluated as useless value and has no side effect
  <-- line 23
  let rec swap = (tree: tree): tree =>
                 --------------------- (continued...)

  Warning Dead Expression
  File "Types.res", line 42, characters 29-45
  This expression is evaluated as useless value and has no side effect
  <-- line 42
  let selfRecursiveConverter = ({self}) => self
                               ----------------

  Warning Dead Expression
  File "Types.res", line 49, characters 33-43
  This expression is evaluated as useless value and has no side effect
  <-- line 49
  let mutuallyRecursiveConverter = ({b}) => b
                                   ----------

  Warning Dead Expression
  File "Types.res", line 52, characters 38-68
  This expression is evaluated as useless value and has no side effect
  <-- line 52
  let testFunctionOnOptionsAsArgument = (a: option<'a>, foo) => foo(a)
                                        ------------------------------

  Warning Dead Expression
  File "Types.res", line 60, characters 24-27
  This expression is evaluated as useless value and has no side effect
  <-- line 60
  let stringT: String.t = "a"
                          ---

  Warning Dead Expression
  File "Types.res", line 63, characters 29-32
  This expression is evaluated as useless value and has no side effect
  <-- line 63
  let jsStringT: Js.String.t = "a"
                               ---

  Warning Dead Expression
  File "Types.res", line 66, characters 31-34
  This expression is evaluated as useless value and has no side effect
  <-- line 66
  let jsString2T: Js.String2.t = "a"
                                 ---

  Warning Dead Expression
  File "Types.res", line 78, characters 20-37
  This expression is evaluated as useless value and has no side effect
  <-- line 78
  let jsonStringify = Js.Json.stringify
                      -----------------

  Warning Dead Expression
  File "Types.res", line 92, characters 22-49
  This expression is evaluated as useless value and has no side effect
  <-- line 92
  let testConvertNull = (x: Js.Null.t<record>) => x
                        ---------------------------

  Warning Dead Expression
  File "Types.res", line 128, characters 15-59
  This expression is evaluated as useless value and has no side effect
  <-- line 128
  let setMatch = (x: marshalMutableField) => x["_match"] = 34
                 --------------------------------------------

  Warning Dead Expression
  File "Types.res", line 138, characters 35-69
  This expression is evaluated as useless value and has no side effect
  <-- line 138
  let testInstantiateTypeParameter = (x: instantiateTypeParameter) => x
                                     ----------------------------------

  Warning Dead Expression
  File "Types.res", line 156, characters 21-24
  This expression is evaluated as useless value and has no side effect
  <-- line 156
  let i64Const: i64B = 34L
                       ---

  Warning Dead Expression
  File "Types.res", line 159, characters 18-31
  This expression is evaluated as useless value and has no side effect
  <-- line 159
  let optFunction = Some(() => 3)
                    -------------

  Warning Dead Expression
  File "Types.res", line 166, characters 10-11
  This expression is evaluated as useless value and has no side effect
  <-- line 166
    let x = 1
            -

  Warning Dead Expression
  File "Yojson.res", line 7, characters 33-76
  This expression is evaluated as useless value and has no side effect
  <-- line 7
    let from_string: string => t = _ => raise(Json_error("Basic.from_string"))
                                   -------------------------------------------

  Warning Dead Expression
  File "Yojson.res", line 13, characters 35-87
  This expression is evaluated as useless value and has no side effect
  <-- line 13
      let member: (string, t) => t = (_s, j) => raise(Type_error("Basic.Util.member", j))
                                     ----------------------------------------------------

  Warning Dead Expression
  File "Yojson.res", line 15, characters 27-34
  This expression is evaluated as useless value and has no side effect
  <-- line 15
      let to_int: t => int = _ => 34
                             -------

  Warning Dead Expression
  File "Yojson.res", line 17, characters 33-40
  This expression is evaluated as useless value and has no side effect
  <-- line 17
      let to_string: t => string = _ => ""
                                   -------

  Warning Dead Variable
  File "CreateErrorHandler1.res", line 3, characters 21-22
  This variable always has useless value
  <-- line 3
    let notification = s => (s, s)
                       -          

  Warning Dead Variable
  File "DeadExn.res", line 8, characters 4-13
  This variable always has useless value
  <-- line 8
  let eToplevel = Etoplevel
      ---------            

  Warning Dead Variable
  File "DeadMl.ml", line 3, characters 8-29
  This variable always has useless value
  <-- line 3
      let thisSpansSeveralLines =
          ---------------------  

  Warning Dead Variable
  File "DeadMl.ml", line 12, characters 6-23
  This variable always has useless value
  <-- line 12
    let thisIsInInterface x = x
        -----------------      

  Warning Dead Variable
  File "DeadMl.ml", line 15, characters 4-21
  This variable always has useless value
  <-- line 15
  let thisHasSemicolons = 3;;
      -----------------      

  Warning Dead Variable
  File "DeadMl.ml", line 29, characters 8-15
  This variable always has useless value
  <-- line 29
      let version = "7.2.0-dev.4"
          -------                

  Warning Dead Variable
  File "DeadMl.ml", line 30, characters 8-14
  This variable always has useless value
  <-- line 30
      let header = "// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE"
          ------                                                        

  Warning Dead Variable
  File "DeadMl.ml", line 31, characters 8-20
  This variable always has useless value
  <-- line 31
      let package_name = "bs-platform"
          ------------                

  Warning Dead Variable
  File "DeadMl.ml", line 56, characters 4-20
  This variable always has useless value
  <-- line 56
  let inline_threshold = Some (10. /. 8.);
      ----------------                    

  Warning Dead Variable
  File "DeadMl.ml", line 59, characters 6-11
  This variable always has useless value
  <-- line 59
    let dead1 = 1
        -----    

  Warning Dead Variable
  File "DeadMl.ml", line 62, characters 8-18
  This variable always has useless value
  <-- line 62
      let deadInner1 = 0
          ----------    

  Warning Dead Variable
  File "DeadMl.ml", line 66, characters 8-18
  This variable always has useless value
  <-- line 66
      let liveInner2 = 0
          ----------    

  Warning Dead Variable
  File "DeadMl.ml", line 69, characters 6-11
  This variable always has useless value
  <-- line 69
    let dead2 = 2
        -----    

  Warning Dead Variable
  File "DeadMl.ml", line 74, characters 8-18
  This variable always has useless value
  <-- line 74
      let liveInner3 = 0
          ----------    

  Warning Dead Variable
  File "DeadMl.ml", line 77, characters 6-11
  This variable always has useless value
  <-- line 77
    let live3 = 3
        -----    

  Warning Dead Variable
  File "DeadMl.ml", line 80, characters 4-9
  This variable always has useless value
  <-- line 80
  let dead4 = 4
      -----    

  Warning Dead Variable
  File "DeadMl.ml", line 82, characters 4-9
  This variable always has useless value
  <-- line 82
  let live5 = 5
      -----    

  Warning Dead Variable
  File "DeadMl.ml", line 85, characters 4-9
  This variable always has useless value
  <-- line 85
  let dead5 = 5
      -----    

  Warning Dead Variable
  File "DeadMl.ml", line 87, characters 4-9
  This variable always has useless value
  <-- line 87
  let live6 = 6
      -----    

  Warning Dead Variable
  File "DeadMl.ml", line 90, characters 4-9
  This variable always has useless value
  <-- line 90
  let dead7 = 7
      -----    

  Warning Dead Variable
  File "DeadMl.ml", line 106, characters 6-11
  This variable always has useless value
  <-- line 106
    let dead8 = 8
        -----    

  Warning Dead Variable
  File "DeadMl.ml", line 107, characters 6-11
  This variable always has useless value
  <-- line 107
    let live9 = 9
        -----    

  Warning Dead Variable
  File "DeadMl.ml", line 108, characters 6-12
  This variable always has useless value
  <-- line 108
    let dead10 = 10
        ------     

  Warning Dead Variable
  File "DeadMl.ml", line 109, characters 6-12
  This variable always has useless value
  <-- line 109
    let live11 = 11
        ------     

  Warning Dead Variable
  File "DeadMl.ml", line 112, characters 21-24
  This variable always has useless value
  <-- line 112
  let [@warning "-32"] foo x = print_int x
                       ---                

  Warning Dead Variable
  File "DeadMl.ml", line 114, characters 43-46
  This variable always has useless value
  <-- line 114
  let [@warning "-unused-value-declaration"] bar x = print_int x
                                             ---                

  Warning Dead Variable
  File "DeadRT.res", line 5, characters 8-28
  This variable always has useless value
  <-- line 5
  let rec emitModuleAccessPath = moduleAccessPath =>
          --------------------                      

  Warning Dead Variable
  File "DeadTest.res", line 2, characters 4-12
  This variable always has useless value
  <-- line 2
  let fortytwo = 42
      --------     

  Warning Dead Variable
  File "DeadTest.res", line 5, characters 4-23
  This variable always has useless value
  <-- line 5
  let fortyTwoButExported = 42
      -------------------     

  Warning Dead Variable
  File "DeadTest.res", line 7, characters 4-18
  This variable always has useless value
  <-- line 7
  let thisIsUsedOnce = 34
      --------------     

  Warning Dead Variable
  File "DeadTest.res", line 10, characters 4-19
  This variable always has useless value
  <-- line 10
  let thisIsUsedTwice = 34
      ---------------     

  Warning Dead Variable
  File "DeadTest.res", line 31, characters 6-29
  This variable always has useless value
  <-- line 31
    let thisSignatureItemIsDead = 34
        -----------------------     

  Warning Dead Variable
  File "DeadTest.res", line 39, characters 6-7
  This variable always has useless value
  <-- line 39
    let a = A
        -    

  Warning Dead Variable
  File "DeadTest.res", line 65, characters 6-31
  This variable always has useless value
  <-- line 65
    let valueOnlyInImplementation = 7
        -------------------------    

  Warning Dead Variable
  File "DeadTest.res", line 77, characters 8-17
  This variable always has useless value
  <-- line 77
  let rec split_map = l => {
          ---------         

  Warning Dead Variable
  File "DeadTest.res", line 85, characters 8-23
  This variable always has useless value
  <-- line 85
  let rec recWithCallback = () => {
          ---------------          

  Warning Dead Variable
  File "DeadTest.res", line 90, characters 8-11
  This variable always has useless value
  <-- line 90
  let rec foo = () => {
          ---          

  Warning Dead Variable
  File "DeadTest.res", line 94, characters 4-7
  This variable always has useless value
  <-- line 94
  and bar = () => foo()
      ---              

  Warning Dead Variable
  File "DeadTest.res", line 96, characters 4-20
  This variable always has useless value
  <-- line 96
  let withDefaultValue = (~paramWithDefault=3, y) => paramWithDefault + y
      ----------------                                                   

  Warning Dead Variable
  File "DeadTest.res", line 113, characters 6-20
  This variable always has useless value
  <-- line 113
    let reasonResource: JSResource.t<
        --------------               

  Warning Dead Variable
  File "DeadTest.res", line 116, characters 6-15
  This variable always has useless value
  <-- line 116
    let makeProps = DynamicallyLoadedComponent.makeProps
        ---------                                       

  Warning Dead Variable
  File "DeadTest.res", line 117, characters 6-10
  This variable always has useless value
  <-- line 117
    let make = props =>
        ----           

  Warning Dead Variable
  File "DeadTest.res", line 129, characters 4-8
  This variable always has useless value
  <-- line 129
  let cmp2 = () => <LazyDynamicallyLoadedComponent2 s="hello" />
      ----                                                      

  Warning Dead Variable
  File "DeadTest.res", line 139, characters 4-7
  This variable always has useless value
  <-- line 139
  let zzz = {
      ---    

  Warning Dead Variable
  File "DeadTest.res", line 148, characters 4-10
  This variable always has useless value
  <-- line 148
  let minute = Int64.mul(60L, second)
      ------                         

  Warning Dead Variable
  File "DeadTest.res", line 150, characters 4-11
  This variable always has useless value
  <-- line 150
  let deadRef = ref(12)
      -------          

  Warning Dead Variable
  File "DeadTest.res", line 152, characters 4-14
  This variable always has useless value
  <-- line 152
  let makeSwitch = ComponentSwitch.make
      ----------                       

  Warning Dead Variable
  File "DeadTest.res", line 159, characters 4-26
  This variable always has useless value
  <-- line 159
  let theSideEffectIsLogging = Js.log(123)
      ----------------------              

  Warning Dead Variable
  File "DeadTest.res", line 161, characters 4-29
  This variable always has useless value
  <-- line 161
  let stringLengthNoSideEffects = String.length("sdkdl")
      -------------------------                         

  Warning Dead Variable
  File "DeadTest.res", line 164, characters 6-19
  This variable always has useless value
  <-- line 164
    let globallyLive1 = 1
        -------------    

  Warning Dead Variable
  File "DeadTest.res", line 165, characters 6-19
  This variable always has useless value
  <-- line 165
    let globallyLive2 = 2
        -------------    

  Warning Dead Variable
  File "DeadTest.res", line 166, characters 6-19
  This variable always has useless value
  <-- line 166
    let globallyLive3 = 3
        -------------    

  Warning Dead Variable
  File "DeadValueTest.res", line 2, characters 4-13
  This variable always has useless value
  <-- line 2
  let valueDead = 2
      ---------    

  Warning Dead Variable
  File "DeadValueTest.res", line 4, characters 4-29
  This variable always has useless value
  <-- line 4
  let valueOnlyInImplementation = 3
      -------------------------    

  Warning Dead Variable
  File "DeadValueTest.res", line 6, characters 8-15
  This variable always has useless value
  <-- line 6
  let rec subList = (b, e, l) =>
          -------               

  Warning Dead Variable
  File "ErrorHandler.res", line 12, characters 4-5
  This variable always has useless value
  <-- line 12
  let x = 42
      -     

  Warning Dead Variable
  File "Exn.res", line 1, characters 4-10
  This variable always has useless value
  <-- line 1
  let raises = () => raise(Not_found)
      ------                         

  Warning Dead Variable
  File "Exn.res", line 3, characters 4-12
  This variable always has useless value
  <-- line 3
  let catches1 = try () catch {
      --------                 

  Warning Dead Variable
  File "Exn.res", line 7, characters 4-12
  This variable always has useless value
  <-- line 7
  let catches2 = switch () {
      --------              

  Warning Dead Variable
  File "Exn.res", line 12, characters 4-17
  This variable always has useless value
  <-- line 12
  let raiseAndCatch = try raise(Not_found) catch {
      -------------                               

  Warning Dead Variable
  File "Exn.res", line 17, characters 4-23
  This variable always has useless value
  <-- line 17
  let raisesWithAnnotaion = () => raise(Not_found)
      -------------------                         

  Warning Dead Variable
  File "Exn.res", line 19, characters 4-28
  This variable always has useless value
  <-- line 19
  let callsRaiseWithAnnotation = raisesWithAnnotaion()
      ------------------------                        

  Warning Dead Variable
  File "Exn.res", line 22, characters 4-42
  This variable always has useless value
  <-- line 22
  let callsRaiseWithAnnotationAndIsAnnotated = raisesWithAnnotaion()
      --------------------------------------                        

  Warning Dead Variable
  File "Exn.res", line 24, characters 4-5
  This variable always has useless value
  <-- line 24
  let z = List.hd(list{})
      -                  

  Warning Dead Variable
  File "Exn.res", line 26, characters 4-19
  This variable always has useless value
  <-- line 26
  let incompleteMatch = l =>
      ---------------       

  Warning Dead Variable
  File "Exn.res", line 34, characters 4-13
  This variable always has useless value
  <-- line 34
  let twoRaises = (x, y) => {
      ---------              

  Warning Dead Variable
  File "Exn.res", line 43, characters 4-14
  This variable always has useless value
  <-- line 43
  let sequencing = () => {
      ----------          

  Warning Dead Variable
  File "Exn.res", line 50, characters 4-14
  This variable always has useless value
  <-- line 50
  let wrongCatch = () =>
      ----------        

  Warning Dead Variable
  File "Exn.res", line 56, characters 4-15
  This variable always has useless value
  <-- line 56
  let wrongCatch2 = b =>
      -----------       

  Warning Dead Variable
  File "Exn.res", line 64, characters 4-19
  This variable always has useless value
  <-- line 64
  let raise2Annotate3 = (x, y) => {
      ---------------              

  Warning Dead Variable
  File "Exn.res", line 75, characters 4-24
  This variable always has useless value
  <-- line 75
  let parse_json_from_file = s => {
      --------------------         

  Warning Dead Variable
  File "Exn.res", line 87, characters 4-11
  This variable always has useless value
  <-- line 87
  let reRaise = () =>
      -------        

  Warning Dead Variable
  File "Exn.res", line 93, characters 4-22
  This variable always has useless value
  <-- line 93
  let switchWithCatchAll = switch raise(A) {
      ------------------                    

  Warning Dead Variable
  File "Exn.res", line 98, characters 4-22
  This variable always has useless value
  <-- line 98
  let raiseInInternalLet = b => {
      ------------------         

  Warning Dead Variable
  File "Exn.res", line 103, characters 4-16
  This variable always has useless value
  <-- line 103
  let indirectCall = () => () |> raisesWithAnnotaion
      ------------                                  

  Warning Dead Variable
  File "Exn.res", line 106, characters 4-9
  This variable always has useless value
  <-- line 106
  let array = a => a[2]
      -----            

  Warning Dead Variable
  File "Exn.res", line 108, characters 4-6
  This variable always has useless value
  <-- line 108
  let id = x => x
      --         

  Warning Dead Variable
  File "Exn.res", line 110, characters 4-11
  This variable always has useless value
  <-- line 110
  let tryChar = v => {
      -------         

  Warning Dead Variable
  File "Exn.res", line 122, characters 4-19
  This variable always has useless value
  <-- line 122
  let specializedHash = tbl => StringHash.find(tbl, "abc")
      ---------------                                     

  Warning Dead Variable
  File "Exn.res", line 125, characters 4-15
  This variable always has useless value
  <-- line 125
  let genericHash = tbl => Hashtbl.find(tbl, "abc")
      -----------                                  

  Warning Dead Variable
  File "Exn.res", line 128, characters 4-13
  This variable always has useless value
  <-- line 128
  let raiseAtAt = () => \"@@"(raise, Not_found)
      ---------                                

  Warning Dead Variable
  File "Exn.res", line 131, characters 4-13
  This variable always has useless value
  <-- line 131
  let raisePipe = Not_found |> raise
      ---------                     

  Warning Dead Variable
  File "Exn.res", line 134, characters 4-14
  This variable always has useless value
  <-- line 134
  let raiseArrow = Not_found->raise
      ----------                   

  Warning Dead Variable
  File "Exn.res", line 137, characters 4-7
  This variable always has useless value
  <-- line 137
  let bar = () => Js.Json.parseExn("!!!")
      ---                                

  Warning Dead Variable
  File "Exn.res", line 139, characters 4-7
  This variable always has useless value
  <-- line 139
  let foo = () =>
      ---        

  Warning Dead Variable
  File "Exn.res", line 145, characters 4-15
  This variable always has useless value
  <-- line 145
  let stringMake1 = String.make(12, ' ')
      -----------                       

  Warning Dead Variable
  File "Exn.res", line 147, characters 4-15
  This variable always has useless value
  <-- line 147
  let stringMake2 = (@doesNotRaise String.make)(12, ' ')
      -----------                                       

  Warning Dead Variable
  File "Exn.res", line 149, characters 4-15
  This variable always has useless value
  <-- line 149
  let stringMake3 = @doesNotRaise String.make(12, ' ')
      -----------                                     

  Warning Dead Variable
  File "Exn.res", line 151, characters 4-16
  This variable always has useless value
  <-- line 151
  let severalCases = cases =>
      ------------           

  Warning Dead Variable
  File "Exn.res", line 160, characters 4-30
  This variable always has useless value
  <-- line 160
  let genericRaiseIsNotSupported = exn => raise(exn)
      --------------------------                    

  Warning Dead Variable
  File "Exn.res", line 162, characters 4-13
  This variable always has useless value
  <-- line 162
  let redundant = (@doesNotRaise String.uncapitalize_ascii)("abc")
      ---------                                                   

  Warning Dead Variable
  File "Exn.res", line 164, characters 4-14
  This variable always has useless value
  <-- line 164
  let redundant2 = @doesNotRaise String.uncapitalize_ascii("abc")
      ----------                                                 

  Warning Dead Variable
  File "Exn.res", line 166, characters 4-14
  This variable always has useless value
  <-- line 166
  let redundant3 = @doesNotRaise (@doesNotRaise String.uncapitalize_ascii)("abc")
      ----------                                                                 

  Warning Dead Variable
  File "Exn.res", line 168, characters 4-14
  This variable always has useless value
  <-- line 168
  let redundant4 = () => {
      ----------          

  Warning Dead Variable
  File "Exn.res", line 179, characters 4-23
  This variable always has useless value
  <-- line 179
  let redundantAnnotation = () => ()
      -------------------           

  Warning Dead Variable
  File "Exn.res", line 181, characters 4-6
  This variable always has useless value
  <-- line 181
  let _x = raise(A)
      --           

  Warning Dead Variable
  File "Exn.res", line 193, characters 4-14
  This variable always has useless value
  <-- line 193
  let onFunction = () => (@doesNotRaise Belt.Array.getExn)([], 0)
      ----------                                                 

  Warning Dead Variable
  File "Exn.res", line 195, characters 4-12
  This variable always has useless value
  <-- line 195
  let onResult = () => @doesNotRaise Belt.Array.getExn([], 0)
      --------                                               

  Warning Dead Variable
  File "Exn.res", line 197, characters 4-18
  This variable always has useless value
  <-- line 197
  let onFunctionPipe = () => []->(@doesNotRaise Belt.Array.getExn)(0)
      --------------                                                 

  Warning Dead Variable
  File "Exn.res", line 199, characters 4-21
  This variable always has useless value
  <-- line 199
  let onResultPipeWrong = () => @doesNotRaise []->Belt.Array.getExn(0)
      -----------------                                               

  Warning Dead Variable
  File "ExnB.res", line 2, characters 4-7
  This variable always has useless value
  <-- line 2
  let foo = () => raise(Not_found)
      ---                         

  Warning Dead Variable
  File "Hooks.res", line 4, characters 4-8
  This variable always has useless value
  <-- line 4
  let make = (~vehicle) => {
      ----                  

  Warning Dead Variable
  File "Hooks.res", line 4, characters 4-8
  This variable always has useless value
  <-- line 4
  let make = (~vehicle) => {
      ----                  

  Warning Dead Variable
  File "Hooks.res", line 25, characters 4-11
  This variable always has useless value
  <-- line 25
  let default = make
      -------       

  Warning Dead Variable
  File "Hooks.res", line 28, characters 4-20
  This variable always has useless value
  <-- line 28
  let anotherComponent = (~vehicle, ~callback: unit => unit) => {
      ----------------                                           

  Warning Dead Variable
  File "Hooks.res", line 28, characters 4-20
  This variable always has useless value
  <-- line 28
  let anotherComponent = (~vehicle, ~callback: unit => unit) => {
      ----------------                                           

  Warning Dead Variable
  File "Hooks.res", line 35, characters 6-10
  This variable always has useless value
  <-- line 35
    let make = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
        ----                                                                             

  Warning Dead Variable
  File "Hooks.res", line 35, characters 6-10
  This variable always has useless value
  <-- line 35
    let make = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
        ----                                                                             

  Warning Dead Variable
  File "Hooks.res", line 38, characters 6-22
  This variable always has useless value
  <-- line 38
    let anotherComponent = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
        ----------------                                                                             

  Warning Dead Variable
  File "Hooks.res", line 38, characters 6-22
  This variable always has useless value
  <-- line 38
    let anotherComponent = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
        ----------------                                                                             

  Warning Dead Variable
  File "Hooks.res", line 42, characters 8-12
  This variable always has useless value
  <-- line 42
      let make = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
          ----                                                                             

  Warning Dead Variable
  File "Hooks.res", line 42, characters 8-12
  This variable always has useless value
  <-- line 42
      let make = (~vehicle) => <div> {React.string("Another Hook " ++ vehicle.name)} </div>
          ----                                                                             

  Warning Dead Variable
  File "Hooks.res", line 45, characters 8-24
  This variable always has useless value
  <-- line 45
      let anotherComponent = (~vehicle) =>
          ----------------                

  Warning Dead Variable
  File "Hooks.res", line 45, characters 8-24
  This variable always has useless value
  <-- line 45
      let anotherComponent = (~vehicle) =>
          ----------------                

  Warning Dead Variable
  File "Hooks.res", line 52, characters 6-10
  This variable always has useless value
  <-- line 52
    let make = () => <div> React.null </div>
        ----                                

  Warning Dead Variable
  File "Hooks.res", line 52, characters 6-10
  This variable always has useless value
  <-- line 52
    let make = () => <div> React.null </div>
        ----                                

  Warning Dead Variable
  File "Hooks.res", line 58, characters 4-27
  This variable always has useless value
  <-- line 58
  let functionWithRenamedArgs = (~_to, ~_Type, ~cb: cb) => {
      -----------------------                               

  Warning Dead Variable
  File "Hooks.res", line 64, characters 4-28
  This variable always has useless value
  <-- line 64
  let componentWithRenamedArgs = (~_to, ~_Type, ~cb: cb) => {
      ------------------------                               

  Warning Dead Variable
  File "Hooks.res", line 64, characters 4-28
  This variable always has useless value
  <-- line 64
  let componentWithRenamedArgs = (~_to, ~_Type, ~cb: cb) => {
      ------------------------                               

  Warning Dead Variable
  File "Hooks.res", line 80, characters 4-18
  This variable always has useless value
  <-- line 80
  let testForwardRef = React.forwardRef(makeWithRef)
      --------------                                

  Warning Dead Variable
  File "Hooks.res", line 85, characters 4-9
  This variable always has useless value
  <-- line 85
  let input = React.forwardRef((~r, (), ref) => <div ref={Obj.magic(ref)}> {React.string(r.x)} </div>)
      -----                                                                                           

  Warning Dead Variable
  File "Hooks.res", line 100, characters 4-24
  This variable always has useless value
  <-- line 100
  let polymorphicComponent = (~p as (x, _)) => React.string(x.name)
      --------------------                                         

  Warning Dead Variable
  File "Hooks.res", line 100, characters 4-24
  This variable always has useless value
  <-- line 100
  let polymorphicComponent = (~p as (x, _)) => React.string(x.name)
      --------------------                                         

  Warning Dead Variable
  File "Hooks.res", line 103, characters 4-33
  This variable always has useless value
  <-- line 103
  let functionReturningReactElement = (~name) => React.string(name)
      -----------------------------                                

  Warning Dead Variable
  File "Hooks.res", line 103, characters 4-33
  This variable always has useless value
  <-- line 103
  let functionReturningReactElement = (~name) => React.string(name)
      -----------------------------                                

  Warning Dead Variable
  File "Hooks.res", line 107, characters 6-10
  This variable always has useless value
  <-- line 107
    let make = (~renderVehicle: {"vehicle": vehicle, "number": int} => React.element) => {
        ----                                                                              

  Warning Dead Variable
  File "Hooks.res", line 107, characters 6-10
  This variable always has useless value
  <-- line 107
    let make = (~renderVehicle: {"vehicle": vehicle, "number": int} => React.element) => {
        ----                                                                              

  Warning Dead Variable
  File "Hooks.res", line 114, characters 4-26
  This variable always has useless value
  <-- line 114
  let aComponentWithChildren = (~vehicle, ~children) =>
      ----------------------                           

  Warning Dead Variable
  File "Hooks.res", line 114, characters 4-26
  This variable always has useless value
  <-- line 114
  let aComponentWithChildren = (~vehicle, ~children) =>
      ----------------------                           

  Warning Dead Variable
  File "ImmutableArray.res", line 16, characters 16-17
  This variable always has useless value
  <-- line 16
    let toArray = a => Array.copy(a->fromT)
                  -                        

  Warning Dead Variable
  File "ImmutableArray.res", line 20, characters 15-16
  This variable always has useless value
  <-- line 20
    let length = a => Array.length(a->fromT)
                 -                          

  Warning Dead Variable
  File "ImmutableArray.res", line 22, characters 13-14
  This variable always has useless value
  <-- line 22
    let size = a => Array.size(a->fromT)
               -                        

  Warning Dead Variable
  File "ImmutableArray.res", line 24, characters 13-14
  This variable always has useless value
  <-- line 24
    let get = (a, x) => (a->fromT)[x]
               -                     

  Warning Dead Variable
  File "ImmutableArray.res", line 24, characters 16-17
  This variable always has useless value
  <-- line 24
    let get = (a, x) => (a->fromT)[x]
                  -                  

  Warning Dead Variable
  File "ImmutableArray.res", line 26, characters 16-17
  This variable always has useless value
  <-- line 26
    let getExn = (a, x) => Array.getExn(a->fromT, x)
                  -                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 26, characters 19-20
  This variable always has useless value
  <-- line 26
    let getExn = (a, x) => Array.getExn(a->fromT, x)
                     -                              

  Warning Dead Variable
  File "ImmutableArray.res", line 28, characters 19-20
  This variable always has useless value
  <-- line 28
    let getUnsafe = (a, x) => Array.getUnsafe(a->fromT, x)
                     -                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 28, characters 22-23
  This variable always has useless value
  <-- line 28
    let getUnsafe = (a, x) => Array.getUnsafe(a->fromT, x)
                        -                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 30, characters 22-23
  This variable always has useless value
  <-- line 30
    let getUndefined = (a, x) => Array.getUndefined(a->fromT, x)
                        -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 30, characters 25-26
  This variable always has useless value
  <-- line 30
    let getUndefined = (a, x) => Array.getUndefined(a->fromT, x)
                           -                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 32, characters 16-17
  This variable always has useless value
  <-- line 32
    let shuffle = x => Array.shuffle(x->fromT)->toT
                  -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 34, characters 16-17
  This variable always has useless value
  <-- line 34
    let reverse = x => Array.reverse(x->fromT)->toT
                  -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 36, characters 26-27
  This variable always has useless value
  <-- line 36
    let makeUninitialized = x => Array.makeUninitialized(x)->toT
                            -                                   

  Warning Dead Variable
  File "ImmutableArray.res", line 38, characters 32-33
  This variable always has useless value
  <-- line 38
    let makeUninitializedUnsafe = x => Array.makeUninitializedUnsafe(x)->toT
                                  -                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 40, characters 14-15
  This variable always has useless value
  <-- line 40
    let make = (x, y) => Array.make(x, y)->toT
                -                             

  Warning Dead Variable
  File "ImmutableArray.res", line 40, characters 17-18
  This variable always has useless value
  <-- line 40
    let make = (x, y) => Array.make(x, y)->toT
                   -                          

  Warning Dead Variable
  File "ImmutableArray.res", line 42, characters 15-16
  This variable always has useless value
  <-- line 42
    let range = (x, y) => Array.range(x, y)->toT
                 -                              

  Warning Dead Variable
  File "ImmutableArray.res", line 42, characters 18-19
  This variable always has useless value
  <-- line 42
    let range = (x, y) => Array.range(x, y)->toT
                    -                           

  Warning Dead Variable
  File "ImmutableArray.res", line 44, characters 17-18
  This variable always has useless value
  <-- line 44
    let rangeBy = (x, y, ~step) => Array.rangeBy(x, y, ~step)->toT
                   -                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 44, characters 20-21
  This variable always has useless value
  <-- line 44
    let rangeBy = (x, y, ~step) => Array.rangeBy(x, y, ~step)->toT
                      -                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 44, characters 23-28
  This variable always has useless value
  <-- line 44
    let rangeBy = (x, y, ~step) => Array.rangeBy(x, y, ~step)->toT
                         -----                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 46, characters 17-18
  This variable always has useless value
  <-- line 46
    let makeByU = (c, f) => Array.makeByU(c, f)->toT
                   -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 46, characters 20-21
  This variable always has useless value
  <-- line 46
    let makeByU = (c, f) => Array.makeByU(c, f)->toT
                      -                             

  Warning Dead Variable
  File "ImmutableArray.res", line 47, characters 16-17
  This variable always has useless value
  <-- line 47
    let makeBy = (c, f) => Array.makeBy(c, f)->toT
                  -                               

  Warning Dead Variable
  File "ImmutableArray.res", line 47, characters 19-20
  This variable always has useless value
  <-- line 47
    let makeBy = (c, f) => Array.makeBy(c, f)->toT
                     -                            

  Warning Dead Variable
  File "ImmutableArray.res", line 49, characters 27-28
  This variable always has useless value
  <-- line 49
    let makeByAndShuffleU = (c, f) => Array.makeByAndShuffleU(c, f)->toT
                             -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 49, characters 30-31
  This variable always has useless value
  <-- line 49
    let makeByAndShuffleU = (c, f) => Array.makeByAndShuffleU(c, f)->toT
                                -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 50, characters 26-27
  This variable always has useless value
  <-- line 50
    let makeByAndShuffle = (c, f) => Array.makeByAndShuffle(c, f)->toT
                            -                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 50, characters 29-30
  This variable always has useless value
  <-- line 50
    let makeByAndShuffle = (c, f) => Array.makeByAndShuffle(c, f)->toT
                               -                                      

  Warning Dead Variable
  File "ImmutableArray.res", line 52, characters 13-15
  This variable always has useless value
  <-- line 52
    let zip = (a1, a2) => Array.zip(fromT(a1), fromT(a2))->toTp
               --                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 52, characters 17-19
  This variable always has useless value
  <-- line 52
    let zip = (a1, a2) => Array.zip(fromT(a1), fromT(a2))->toTp
                   --                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 54, characters 16-18
  This variable always has useless value
  <-- line 54
    let zipByU = (a1, a2, f) => Array.zipByU(fromT(a1), fromT(a2), f)->toT
                  --                                                      

  Warning Dead Variable
  File "ImmutableArray.res", line 54, characters 20-22
  This variable always has useless value
  <-- line 54
    let zipByU = (a1, a2, f) => Array.zipByU(fromT(a1), fromT(a2), f)->toT
                      --                                                  

  Warning Dead Variable
  File "ImmutableArray.res", line 54, characters 24-25
  This variable always has useless value
  <-- line 54
    let zipByU = (a1, a2, f) => Array.zipByU(fromT(a1), fromT(a2), f)->toT
                          -                                               

  Warning Dead Variable
  File "ImmutableArray.res", line 55, characters 15-17
  This variable always has useless value
  <-- line 55
    let zipBy = (a1, a2, f) => Array.zipBy(fromT(a1), fromT(a2), f)->toT
                 --                                                     

  Warning Dead Variable
  File "ImmutableArray.res", line 55, characters 19-21
  This variable always has useless value
  <-- line 55
    let zipBy = (a1, a2, f) => Array.zipBy(fromT(a1), fromT(a2), f)->toT
                     --                                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 55, characters 23-24
  This variable always has useless value
  <-- line 55
    let zipBy = (a1, a2, f) => Array.zipBy(fromT(a1), fromT(a2), f)->toT
                         -                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 57, characters 14-15
  This variable always has useless value
  <-- line 57
    let unzip = a => Array.unzip(a->fromTp)->toT2
                -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 59, characters 16-18
  This variable always has useless value
  <-- line 59
    let concat = (a1, a2) => Array.concat(a1->fromT, a2->fromT)->toT
                  --                                                

  Warning Dead Variable
  File "ImmutableArray.res", line 59, characters 20-22
  This variable always has useless value
  <-- line 59
    let concat = (a1, a2) => Array.concat(a1->fromT, a2->fromT)->toT
                      --                                            

  Warning Dead Variable
  File "ImmutableArray.res", line 61, characters 20-21
  This variable always has useless value
  <-- line 61
    let concatMany = (a: t<t<_>>) => Array.concatMany(a->fromTT)->toT
                      -                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 63, characters 15-16
  This variable always has useless value
  <-- line 63
    let slice = (a, ~offset, ~len) => Array.slice(a->fromT, ~offset, ~len)->toT
                 -                                                             

  Warning Dead Variable
  File "ImmutableArray.res", line 63, characters 18-25
  This variable always has useless value
  <-- line 63
    let slice = (a, ~offset, ~len) => Array.slice(a->fromT, ~offset, ~len)->toT
                    -------                                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 63, characters 27-31
  This variable always has useless value
  <-- line 63
    let slice = (a, ~offset, ~len) => Array.slice(a->fromT, ~offset, ~len)->toT
                             ----                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 65, characters 20-21
  This variable always has useless value
  <-- line 65
    let sliceToEnd = (a, b) => Array.sliceToEnd(a->fromT, b)->toT
                      -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 65, characters 23-24
  This variable always has useless value
  <-- line 65
    let sliceToEnd = (a, b) => Array.sliceToEnd(a->fromT, b)->toT
                         -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 67, characters 13-14
  This variable always has useless value
  <-- line 67
    let copy = a => Array.copy(a->fromT)->toT
               -                             

  Warning Dead Variable
  File "ImmutableArray.res", line 69, characters 18-19
  This variable always has useless value
  <-- line 69
    let forEachU = (a, f) => Array.forEachU(a->fromT, f)
                    -                                   

  Warning Dead Variable
  File "ImmutableArray.res", line 69, characters 21-22
  This variable always has useless value
  <-- line 69
    let forEachU = (a, f) => Array.forEachU(a->fromT, f)
                       -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 70, characters 17-18
  This variable always has useless value
  <-- line 70
    let forEach = (a, f) => Array.forEach(a->fromT, f)
                   -                                  

  Warning Dead Variable
  File "ImmutableArray.res", line 70, characters 20-21
  This variable always has useless value
  <-- line 70
    let forEach = (a, f) => Array.forEach(a->fromT, f)
                      -                               

  Warning Dead Variable
  File "ImmutableArray.res", line 72, characters 14-15
  This variable always has useless value
  <-- line 72
    let mapU = (a, f) => Array.mapU(a->fromT, f)->toT
                -                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 72, characters 17-18
  This variable always has useless value
  <-- line 72
    let mapU = (a, f) => Array.mapU(a->fromT, f)->toT
                   -                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 73, characters 13-14
  This variable always has useless value
  <-- line 73
    let map = (a, f) => Array.map(a->fromT, f)->toT
               -                                   

  Warning Dead Variable
  File "ImmutableArray.res", line 73, characters 16-17
  This variable always has useless value
  <-- line 73
    let map = (a, f) => Array.map(a->fromT, f)->toT
                  -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 75, characters 24-25
  This variable always has useless value
  <-- line 75
    let keepWithIndexU = (a, f) => Array.keepWithIndexU(a->fromT, f)->toT
                          -                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 75, characters 27-28
  This variable always has useless value
  <-- line 75
    let keepWithIndexU = (a, f) => Array.keepWithIndexU(a->fromT, f)->toT
                             -                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 76, characters 23-24
  This variable always has useless value
  <-- line 76
    let keepWithIndex = (a, f) => Array.keepWithIndex(a->fromT, f)->toT
                         -                                             

  Warning Dead Variable
  File "ImmutableArray.res", line 76, characters 26-27
  This variable always has useless value
  <-- line 76
    let keepWithIndex = (a, f) => Array.keepWithIndex(a->fromT, f)->toT
                            -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 78, characters 18-19
  This variable always has useless value
  <-- line 78
    let keepMapU = (a, f) => Array.keepMapU(a->fromT, f)->toT
                    -                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 78, characters 21-22
  This variable always has useless value
  <-- line 78
    let keepMapU = (a, f) => Array.keepMapU(a->fromT, f)->toT
                       -                                     

  Warning Dead Variable
  File "ImmutableArray.res", line 79, characters 17-18
  This variable always has useless value
  <-- line 79
    let keepMap = (a, f) => Array.keepMap(a->fromT, f)->toT
                   -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 79, characters 20-21
  This variable always has useless value
  <-- line 79
    let keepMap = (a, f) => Array.keepMap(a->fromT, f)->toT
                      -                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 81, characters 27-28
  This variable always has useless value
  <-- line 81
    let forEachWithIndexU = (a, f) => Array.forEachWithIndexU(a->fromT, f)
                             -                                            

  Warning Dead Variable
  File "ImmutableArray.res", line 81, characters 30-31
  This variable always has useless value
  <-- line 81
    let forEachWithIndexU = (a, f) => Array.forEachWithIndexU(a->fromT, f)
                                -                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 82, characters 26-27
  This variable always has useless value
  <-- line 82
    let forEachWithIndex = (a, f) => Array.forEachWithIndex(a->fromT, f)
                            -                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 82, characters 29-30
  This variable always has useless value
  <-- line 82
    let forEachWithIndex = (a, f) => Array.forEachWithIndex(a->fromT, f)
                               -                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 84, characters 23-24
  This variable always has useless value
  <-- line 84
    let mapWithIndexU = (a, f) => Array.mapWithIndexU(a->fromT, f)->toT
                         -                                             

  Warning Dead Variable
  File "ImmutableArray.res", line 84, characters 26-27
  This variable always has useless value
  <-- line 84
    let mapWithIndexU = (a, f) => Array.mapWithIndexU(a->fromT, f)->toT
                            -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 85, characters 22-23
  This variable always has useless value
  <-- line 85
    let mapWithIndex = (a, f) => Array.mapWithIndex(a->fromT, f)->toT
                        -                                            

  Warning Dead Variable
  File "ImmutableArray.res", line 85, characters 25-26
  This variable always has useless value
  <-- line 85
    let mapWithIndex = (a, f) => Array.mapWithIndex(a->fromT, f)->toT
                           -                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 87, characters 20-21
  This variable always has useless value
  <-- line 87
    let partitionU = (a, f) => Array.partitionU(a->fromT, f)->toT2
                      -                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 87, characters 23-24
  This variable always has useless value
  <-- line 87
    let partitionU = (a, f) => Array.partitionU(a->fromT, f)->toT2
                         -                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 88, characters 19-20
  This variable always has useless value
  <-- line 88
    let partition = (a, f) => Array.partition(a->fromT, f)->toT2
                     -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 88, characters 22-23
  This variable always has useless value
  <-- line 88
    let partition = (a, f) => Array.partition(a->fromT, f)->toT2
                        -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 90, characters 17-18
  This variable always has useless value
  <-- line 90
    let reduceU = (a, b, f) => Array.reduceU(a->fromT, b, f)
                   -                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 90, characters 20-21
  This variable always has useless value
  <-- line 90
    let reduceU = (a, b, f) => Array.reduceU(a->fromT, b, f)
                      -                                     

  Warning Dead Variable
  File "ImmutableArray.res", line 90, characters 23-24
  This variable always has useless value
  <-- line 90
    let reduceU = (a, b, f) => Array.reduceU(a->fromT, b, f)
                         -                                  

  Warning Dead Variable
  File "ImmutableArray.res", line 91, characters 16-17
  This variable always has useless value
  <-- line 91
    let reduce = (a, b, f) => Array.reduce(a->fromT, b, f)
                  -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 91, characters 19-20
  This variable always has useless value
  <-- line 91
    let reduce = (a, b, f) => Array.reduce(a->fromT, b, f)
                     -                                    

  Warning Dead Variable
  File "ImmutableArray.res", line 91, characters 22-23
  This variable always has useless value
  <-- line 91
    let reduce = (a, b, f) => Array.reduce(a->fromT, b, f)
                        -                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 93, characters 24-25
  This variable always has useless value
  <-- line 93
    let reduceReverseU = (a, b, f) => Array.reduceReverseU(a->fromT, b, f)
                          -                                               

  Warning Dead Variable
  File "ImmutableArray.res", line 93, characters 27-28
  This variable always has useless value
  <-- line 93
    let reduceReverseU = (a, b, f) => Array.reduceReverseU(a->fromT, b, f)
                             -                                            

  Warning Dead Variable
  File "ImmutableArray.res", line 93, characters 30-31
  This variable always has useless value
  <-- line 93
    let reduceReverseU = (a, b, f) => Array.reduceReverseU(a->fromT, b, f)
                                -                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 94, characters 23-24
  This variable always has useless value
  <-- line 94
    let reduceReverse = (a, b, f) => Array.reduceReverse(a->fromT, b, f)
                         -                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 94, characters 26-27
  This variable always has useless value
  <-- line 94
    let reduceReverse = (a, b, f) => Array.reduceReverse(a->fromT, b, f)
                            -                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 94, characters 29-30
  This variable always has useless value
  <-- line 94
    let reduceReverse = (a, b, f) => Array.reduceReverse(a->fromT, b, f)
                               -                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 96, characters 25-27
  This variable always has useless value
  <-- line 96
    let reduceReverse2U = (a1, a2, c, f) => Array.reduceReverse2U(fromT(a1), fromT(a2), c, f)
                           --                                                                

  Warning Dead Variable
  File "ImmutableArray.res", line 96, characters 29-31
  This variable always has useless value
  <-- line 96
    let reduceReverse2U = (a1, a2, c, f) => Array.reduceReverse2U(fromT(a1), fromT(a2), c, f)
                               --                                                            

  Warning Dead Variable
  File "ImmutableArray.res", line 96, characters 33-34
  This variable always has useless value
  <-- line 96
    let reduceReverse2U = (a1, a2, c, f) => Array.reduceReverse2U(fromT(a1), fromT(a2), c, f)
                                   -                                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 96, characters 36-37
  This variable always has useless value
  <-- line 96
    let reduceReverse2U = (a1, a2, c, f) => Array.reduceReverse2U(fromT(a1), fromT(a2), c, f)
                                      -                                                      

  Warning Dead Variable
  File "ImmutableArray.res", line 97, characters 24-26
  This variable always has useless value
  <-- line 97
    let reduceReverse2 = (a1, a2, c, f) => Array.reduceReverse2(fromT(a1), fromT(a2), c, f)
                          --                                                               

  Warning Dead Variable
  File "ImmutableArray.res", line 97, characters 28-30
  This variable always has useless value
  <-- line 97
    let reduceReverse2 = (a1, a2, c, f) => Array.reduceReverse2(fromT(a1), fromT(a2), c, f)
                              --                                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 97, characters 32-33
  This variable always has useless value
  <-- line 97
    let reduceReverse2 = (a1, a2, c, f) => Array.reduceReverse2(fromT(a1), fromT(a2), c, f)
                                  -                                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 97, characters 35-36
  This variable always has useless value
  <-- line 97
    let reduceReverse2 = (a1, a2, c, f) => Array.reduceReverse2(fromT(a1), fromT(a2), c, f)
                                     -                                                     

  Warning Dead Variable
  File "ImmutableArray.res", line 99, characters 15-16
  This variable always has useless value
  <-- line 99
    let someU = (a, f) => Array.someU(a->fromT, f)
                 -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 99, characters 18-19
  This variable always has useless value
  <-- line 99
    let someU = (a, f) => Array.someU(a->fromT, f)
                    -                             

  Warning Dead Variable
  File "ImmutableArray.res", line 100, characters 14-15
  This variable always has useless value
  <-- line 100
    let some = (a, f) => Array.some(a->fromT, f)
                -                               

  Warning Dead Variable
  File "ImmutableArray.res", line 100, characters 17-18
  This variable always has useless value
  <-- line 100
    let some = (a, f) => Array.some(a->fromT, f)
                   -                            

  Warning Dead Variable
  File "ImmutableArray.res", line 102, characters 16-17
  This variable always has useless value
  <-- line 102
    let everyU = (a, f) => Array.everyU(a->fromT, f)
                  -                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 102, characters 19-20
  This variable always has useless value
  <-- line 102
    let everyU = (a, f) => Array.everyU(a->fromT, f)
                     -                              

  Warning Dead Variable
  File "ImmutableArray.res", line 103, characters 15-16
  This variable always has useless value
  <-- line 103
    let every = (a, f) => Array.every(a->fromT, f)
                 -                                

  Warning Dead Variable
  File "ImmutableArray.res", line 103, characters 18-19
  This variable always has useless value
  <-- line 103
    let every = (a, f) => Array.every(a->fromT, f)
                    -                             

  Warning Dead Variable
  File "ImmutableArray.res", line 105, characters 17-19
  This variable always has useless value
  <-- line 105
    let every2U = (a1, a2, f) => Array.every2U(fromT(a1), fromT(a2), f)
                   --                                                  

  Warning Dead Variable
  File "ImmutableArray.res", line 105, characters 21-23
  This variable always has useless value
  <-- line 105
    let every2U = (a1, a2, f) => Array.every2U(fromT(a1), fromT(a2), f)
                       --                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 105, characters 25-26
  This variable always has useless value
  <-- line 105
    let every2U = (a1, a2, f) => Array.every2U(fromT(a1), fromT(a2), f)
                           -                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 106, characters 16-18
  This variable always has useless value
  <-- line 106
    let every2 = (a1, a2, f) => Array.every2(fromT(a1), fromT(a2), f)
                  --                                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 106, characters 20-22
  This variable always has useless value
  <-- line 106
    let every2 = (a1, a2, f) => Array.every2(fromT(a1), fromT(a2), f)
                      --                                             

  Warning Dead Variable
  File "ImmutableArray.res", line 106, characters 24-25
  This variable always has useless value
  <-- line 106
    let every2 = (a1, a2, f) => Array.every2(fromT(a1), fromT(a2), f)
                          -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 108, characters 16-18
  This variable always has useless value
  <-- line 108
    let some2U = (a1, a2, f) => Array.some2U(fromT(a1), fromT(a2), f)
                  --                                                 

  Warning Dead Variable
  File "ImmutableArray.res", line 108, characters 20-22
  This variable always has useless value
  <-- line 108
    let some2U = (a1, a2, f) => Array.some2U(fromT(a1), fromT(a2), f)
                      --                                             

  Warning Dead Variable
  File "ImmutableArray.res", line 108, characters 24-25
  This variable always has useless value
  <-- line 108
    let some2U = (a1, a2, f) => Array.some2U(fromT(a1), fromT(a2), f)
                          -                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 109, characters 15-17
  This variable always has useless value
  <-- line 109
    let some2 = (a1, a2, f) => Array.some2(fromT(a1), fromT(a2), f)
                 --                                                

  Warning Dead Variable
  File "ImmutableArray.res", line 109, characters 19-21
  This variable always has useless value
  <-- line 109
    let some2 = (a1, a2, f) => Array.some2(fromT(a1), fromT(a2), f)
                     --                                            

  Warning Dead Variable
  File "ImmutableArray.res", line 109, characters 23-24
  This variable always has useless value
  <-- line 109
    let some2 = (a1, a2, f) => Array.some2(fromT(a1), fromT(a2), f)
                         -                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 111, characters 14-16
  This variable always has useless value
  <-- line 111
    let cmpU = (a1, a2, f) => Array.cmpU(fromT(a1), fromT(a2), f)
                --                                               

  Warning Dead Variable
  File "ImmutableArray.res", line 111, characters 18-20
  This variable always has useless value
  <-- line 111
    let cmpU = (a1, a2, f) => Array.cmpU(fromT(a1), fromT(a2), f)
                    --                                           

  Warning Dead Variable
  File "ImmutableArray.res", line 111, characters 22-23
  This variable always has useless value
  <-- line 111
    let cmpU = (a1, a2, f) => Array.cmpU(fromT(a1), fromT(a2), f)
                        -                                        

  Warning Dead Variable
  File "ImmutableArray.res", line 112, characters 13-15
  This variable always has useless value
  <-- line 112
    let cmp = (a1, a2, f) => Array.cmp(fromT(a1), fromT(a2), f)
               --                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 112, characters 17-19
  This variable always has useless value
  <-- line 112
    let cmp = (a1, a2, f) => Array.cmp(fromT(a1), fromT(a2), f)
                   --                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 112, characters 21-22
  This variable always has useless value
  <-- line 112
    let cmp = (a1, a2, f) => Array.cmp(fromT(a1), fromT(a2), f)
                       -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 114, characters 13-15
  This variable always has useless value
  <-- line 114
    let eqU = (a1, a2, f) => Array.eqU(fromT(a1), fromT(a2), f)
               --                                              

  Warning Dead Variable
  File "ImmutableArray.res", line 114, characters 17-19
  This variable always has useless value
  <-- line 114
    let eqU = (a1, a2, f) => Array.eqU(fromT(a1), fromT(a2), f)
                   --                                          

  Warning Dead Variable
  File "ImmutableArray.res", line 114, characters 21-22
  This variable always has useless value
  <-- line 114
    let eqU = (a1, a2, f) => Array.eqU(fromT(a1), fromT(a2), f)
                       -                                       

  Warning Dead Variable
  File "ImmutableArray.res", line 115, characters 12-14
  This variable always has useless value
  <-- line 115
    let eq = (a1, a2, f) => Array.eq(fromT(a1), fromT(a2), f)
              --                                             

  Warning Dead Variable
  File "ImmutableArray.res", line 115, characters 16-18
  This variable always has useless value
  <-- line 115
    let eq = (a1, a2, f) => Array.eq(fromT(a1), fromT(a2), f)
                  --                                         

  Warning Dead Variable
  File "ImmutableArray.res", line 115, characters 20-21
  This variable always has useless value
  <-- line 115
    let eq = (a1, a2, f) => Array.eq(fromT(a1), fromT(a2), f)
                      -                                      

  Warning Dead Variable
  File "ImportJsValue.res", line 27, characters 4-17
  This variable always has useless value
  <-- line 27
  let roundedNumber = round(1.8)
      -------------             

  Warning Dead Variable
  File "ImportJsValue.res", line 30, characters 4-13
  This variable always has useless value
  <-- line 30
  let areaValue = area({x: 3, y: None})
      ---------                        

  Warning Dead Variable
  File "ImportJsValue.res", line 40, characters 6-12
  This variable always has useless value
  <-- line 40
    let getAbs = (x: t) => {
        ------              

  Warning Dead Variable
  File "ImportJsValue.res", line 47, characters 4-14
  This variable always has useless value
  <-- line 47
  let useGetProp = (x: AbsoluteValue.t) => x->AbsoluteValue.getProp + 1
      ----------                                                       

  Warning Dead Variable
  File "ImportJsValue.res", line 50, characters 4-13
  This variable always has useless value
  <-- line 50
  let useGetAbs = (x: AbsoluteValue.t) => x->AbsoluteValue.getAbs + 1
      ---------                                                      

  Warning Dead Variable
  File "ImportJsValue.res", line 64, characters 4-27
  This variable always has useless value
  <-- line 64
  let returnedFromHigherOrder = higherOrder(\"+")
      -----------------------                    

  Warning Dead Variable
  File "InnerModules.res", line 2, characters 4-15
  This variable always has useless value
  <-- line 2
  let wrapExitTop = x => exit(x)
      -----------               

  Warning Dead Variable
  File "InnerModules.res", line 6, characters 6-16
  This variable always has useless value
  <-- line 6
    let wrapExitM1 = x => exit(x)
        ----------               

  Warning Dead Variable
  File "InnerModules.res", line 9, characters 6-17
  This variable always has useless value
  <-- line 9
    let callLocally = x => wrapExitM1(x)
        -----------                     

  Warning Dead Variable
  File "InnerModules.res", line 12, characters 6-13
  This variable always has useless value
  <-- line 12
    let callTop = x => wrapExitTop(x)
        -------                      

  Warning Dead Variable
  File "InnerModules.res", line 16, characters 8-18
  This variable always has useless value
  <-- line 16
      let wrapExitM2 = x => exit(x)
          ----------               

  Warning Dead Variable
  File "InnerModules.res", line 19, characters 8-14
  This variable always has useless value
  <-- line 19
      let callM1 = x => wrapExitM1(x)
          ------                     

  Warning Dead Variable
  File "InnerModules.res", line 22, characters 8-15
  This variable always has useless value
  <-- line 22
      let callTop = x => wrapExitTop(x)
          -------                      

  Warning Dead Variable
  File "InnerModules.res", line 27, characters 4-10
  This variable always has useless value
  <-- line 27
  let callM1 = x => M1.wrapExitM1(x)
      ------                        

  Warning Dead Variable
  File "ModuleAliases2.res", line 21, characters 4-5
  This variable always has useless value
  <-- line 21
  let q = 42
      -     

  Warning Dead Variable
  File "ModuleExceptionBug.res", line 2, characters 6-18
  This variable always has useless value
  <-- line 2
    let customDouble = foo => foo * 2
        ------------                 

  Warning Dead Variable
  File "OptArg.res", line 3, characters 11-13
  This variable always has useless value
  <-- line 3
  let bar = (~x=?, ~y, ~z=?, w) => y + w
             --                         

  Warning Dead Variable
  File "OptArg.res", line 3, characters 21-23
  This variable always has useless value
  <-- line 3
  let bar = (~x=?, ~y, ~z=?, w) => y + w
                       --               

  Warning Dead Variable
  File "OptArg.res", line 18, characters 20-22
  This variable always has useless value
  <-- line 18
  let oneArg = (~a=1, ~z, b) => a + b
                      --             

  Warning Dead Variable
  File "TestPromise.res", line 14, characters 4-11
  This variable always has useless value
  <-- line 14
  let convert = Js.Promise.then_(({s}) => Js.Promise.resolve({result: s}))
      -------                                                             

  Warning Dead Variable
  File "Types.res", line 5, characters 4-15
  This variable always has useless value
  <-- line 5
  let someIntList = list{1, 2, 3}
      -----------                

  Warning Dead Variable
  File "Types.res", line 8, characters 4-7
  This variable always has useless value
  <-- line 8
  let map = List.map
      ---           

  Warning Dead Variable
  File "Types.res", line 23, characters 8-12
  This variable always has useless value
  <-- line 23
  let rec swap = (tree: tree): tree =>
          ----                        

  Warning Dead Variable
  File "Types.res", line 42, characters 4-26
  This variable always has useless value
  <-- line 42
  let selfRecursiveConverter = ({self}) => self
      ----------------------                   

  Warning Dead Variable
  File "Types.res", line 49, characters 4-30
  This variable always has useless value
  <-- line 49
  let mutuallyRecursiveConverter = ({b}) => b
      --------------------------             

  Warning Dead Variable
  File "Types.res", line 52, characters 4-35
  This variable always has useless value
  <-- line 52
  let testFunctionOnOptionsAsArgument = (a: option<'a>, foo) => foo(a)
      -------------------------------                                 

  Warning Dead Variable
  File "Types.res", line 60, characters 4-11
  This variable always has useless value
  <-- line 60
  let stringT: String.t = "a"
      -------                

  Warning Dead Variable
  File "Types.res", line 63, characters 4-13
  This variable always has useless value
  <-- line 63
  let jsStringT: Js.String.t = "a"
      ---------                   

  Warning Dead Variable
  File "Types.res", line 66, characters 4-14
  This variable always has useless value
  <-- line 66
  let jsString2T: Js.String2.t = "a"
      ----------                    

  Warning Dead Variable
  File "Types.res", line 78, characters 4-17
  This variable always has useless value
  <-- line 78
  let jsonStringify = Js.Json.stringify
      -------------                    

  Warning Dead Variable
  File "Types.res", line 92, characters 4-19
  This variable always has useless value
  <-- line 92
  let testConvertNull = (x: Js.Null.t<record>) => x
      ---------------                              

  Warning Dead Variable
  File "Types.res", line 112, characters 4-21
  This variable always has useless value
  <-- line 112
  let testMarshalFields: marshalFields = {
      -----------------                   

  Warning Dead Variable
  File "Types.res", line 128, characters 4-12
  This variable always has useless value
  <-- line 128
  let setMatch = (x: marshalMutableField) => x["_match"] = 34
      --------                                               

  Warning Dead Variable
  File "Types.res", line 138, characters 4-32
  This variable always has useless value
  <-- line 138
  let testInstantiateTypeParameter = (x: instantiateTypeParameter) => x
      ----------------------------                                     

  Warning Dead Variable
  File "Types.res", line 147, characters 4-15
  This variable always has useless value
  <-- line 147
  let currentTime = Js.Date.make()
      -----------                 

  Warning Dead Variable
  File "Types.res", line 156, characters 4-12
  This variable always has useless value
  <-- line 156
  let i64Const: i64B = 34L
      --------            

  Warning Dead Variable
  File "Types.res", line 159, characters 4-15
  This variable always has useless value
  <-- line 159
  let optFunction = Some(() => 3)
      -----------                

  Warning Dead Variable
  File "Types.res", line 166, characters 6-7
  This variable always has useless value
  <-- line 166
    let x = 1
        -    

  Warning Dead Variable
  File "Yojson.res", line 7, characters 6-17
  This variable always has useless value
  <-- line 7
    let from_string: string => t = _ => raise(Json_error("Basic.from_string"))
        -----------                                                           

  Warning Dead Variable
  File "Yojson.res", line 13, characters 8-14
  This variable always has useless value
  <-- line 13
      let member: (string, t) => t = (_s, j) => raise(Type_error("Basic.Util.member", j))
          ------                                                                         

  Warning Dead Variable
  File "Yojson.res", line 15, characters 8-14
  This variable always has useless value
  <-- line 15
      let to_int: t => int = _ => 34
          ------                    

  Warning Dead Variable
  File "Yojson.res", line 17, characters 8-17
  This variable always has useless value
  <-- line 17
      let to_string: t => string = _ => ""
          ---------                       
  
  Analysis reported 492 issues (Warning Dead Expression:193, Warning Dead Variable:299)
